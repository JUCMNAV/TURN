/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
grammar DebugInternalTurn;

// Rule URNspec
ruleURNspec:
	('urnModel'
	ruleQualifiedName
	ruleConcreteURNspec
	?
	    |
	ruleActor
	*
	    |
	'showAsMeansEnd'
	?
	    |
	ruleStrategiesGroup
	*
	    |
	ruleEvaluationStrategy
	*
	    |
	ruleIndicatorConversion
	*
	    |
	ruleContributionContextGroup
	*
	    |
	ruleContributionContext
	*
	    |
	ruleUCMmap
	*
	    |
	ruleScenarioGroup
	*
	    |
	ruleScenarioDef
	*
	    |
	ruleVariable
	*
	    |
	ruleEnumerationType
	*
	    |
	ruleConcern
	*
	    |
	ruleURNlink
	*
	    |
	ruleMetadata
	*
	)*
;

// Rule ConcreteURNspec
ruleConcreteURNspec:
	'{'
	'description'
	RULE_STRING
	'author'
	RULE_STRING
	'created'
	RULE_STRING
	'modified'
	RULE_STRING
	'version'
	RULE_STRING
	'urnVersion'
	RULE_STRING
	'}'
;

// Rule Concern
ruleConcern:
	'concern'
	ruleQualifiedName
	ruleLongName
	':'
	ruleCondition
	?
	ruleQualifiedName
	(
		','
		ruleQualifiedName
	)*
;

// Rule LongName
ruleLongName:
	(
		'#'
		(
			RULE_ID
			    |RULE_STRING
		)
	)?
;

// Rule Condition
ruleCondition:
	'['
	ruleText
	']'
	(
		'{'
		ruleConcreteCondition
		?
		'}'
	)?
;

// Rule ConcreteCondition
ruleConcreteCondition:
	RULE_STRING
	RULE_STRING
;

// Rule URNlink
ruleURNlink:
	'link'
	(
		ruleQualifiedName
		ruleLongName
		':'
	)?
	(
		'type'
		ruleText
	)?
	ruleQualifiedName
	'-->'
	ruleQualifiedName
;

// Rule Metadata
ruleMetadata:
	'metadata'
	(
		ruleQualifiedName
		':'
	)?
	RULE_ID
	'='
	ruleText
;

// Rule Actor
ruleActor:
	'actor'
	ruleQualifiedName
	ruleLongName
	'{'
	(
		'importance'
		(
			ruleImportanceType
			    |
			ruleQuantitativeValue
		)
	)?
	ruleIntentionalElement
	*
	'}'
;

// Rule IntentionalElement
ruleIntentionalElement:
	ruleIntentionalElementType
	ruleQualifiedName
	ruleLongName
	'{'
	(
		'importance'
		(
			ruleImportanceType
			    |
			ruleQuantitativeValue
		)
	)?
	(
		'unit'
		RULE_STRING
	)?
	ruleElementLink
	*
	'}'
;

// Rule ElementLink
ruleElementLink:
	(
		ruleContribution
		    |
		ruleDecomposition
		    |
		ruleDependency
	)
;

// Rule Contribution
ruleContribution:
	(
		ruleQualifiedName
		ruleLongName
	)?
	'contributesTo'
	ruleQualifiedName
	'correlated'
	?
	'with'
	(
		ruleContributionType
		    |
		ruleQuantitativeValue
	)
;

// Rule Decomposition
ruleDecomposition:
	(
		ruleQualifiedName
		ruleLongName
	)?
	ruleDecompositionType
	'decomposes'
	ruleQualifiedName
;

// Rule Dependency
ruleDependency:
	(
		ruleQualifiedName
		ruleLongName
	)?
	'dependsOn'
	ruleQualifiedName
;

// Rule ArtificialRule
ruleArtificialRule:
	RULE_STRING
	?
;

// Rule StrategiesGroup
ruleStrategiesGroup:
	'strategiesGroup'
	ruleQualifiedName
	ruleLongName
	':'
	RULE_ID
	(
		','
		RULE_ID
	)*
;

// Rule EvaluationStrategy
ruleEvaluationStrategy:
	'strategy'
	ruleQualifiedName
	ruleLongName
	'{'
	ruleConcreteStrategy
	?
	ruleEvaluation
	*
	(
		'includes'
		RULE_ID
		(
			','
			RULE_ID
		)*
	)?
	'}'
;

// Rule ConcreteStrategy
ruleConcreteStrategy:
	'author'
	RULE_STRING
;

// Rule Evaluation
ruleEvaluation:
	ruleQualifiedName
	'exceeding'
	?
	(
		'evaluation'
		(
			ruleQualitativeLabel
			    |
			ruleQuantitativeValue
		)
		    |
		ruleIndicatorEvaluation
		'convertedWith'
		RULE_ID
	)
;

// Rule IndicatorEvaluation
ruleIndicatorEvaluation:
	'real'
	(
		RULE_STRING
		    |
		RULE_INT
	)
;

// Rule IndicatorConversion
ruleIndicatorConversion:
	(
		ruleLinearConversion
		    |
		ruleQualToQMappings
	)
;

// Rule LinearConversion
ruleLinearConversion:
	'linearConversion'
	ruleQualifiedName
	ruleLongName
	'{'
	'unit'
	RULE_STRING
	'target'
	RULE_INT
	'threshold'
	RULE_INT
	'worst'
	RULE_INT
	'}'
;

// Rule QualToQMappings
ruleQualToQMappings:
	'mappingConversion'
	ruleQualifiedName
	ruleLongName
	'{'
	'unit'
	RULE_STRING
	ruleQualToQMapping
	+
	'}'
;

// Rule QualToQMapping
ruleQualToQMapping:
	'exceeding'
	?
	'real'
	RULE_STRING
	'-->'
	(
		ruleQualitativeLabel
		    |
		ruleQuantitativeValue
	)
;

// Rule ContributionContextGroup
ruleContributionContextGroup:
	'contributionContextGroup'
	ruleQualifiedName
	ruleLongName
	':'
	RULE_ID
	(
		','
		RULE_ID
	)*
;

// Rule ContributionContext
ruleContributionContext:
	'contributionContext'
	ruleQualifiedName
	ruleLongName
	'{'
	ruleContributionChange
	*
	(
		'includes'
		RULE_ID
		(
			','
			RULE_ID
		)*
	)?
	'}'
;

// Rule ContributionChange
ruleContributionChange:
	ruleQualifiedName
	'with'
	(
		ruleContributionType
		    |
		ruleQuantitativeValue
	)
;

// Rule QuantitativeValue
ruleQuantitativeValue:
	(
		'-'
		    |
		'+'
	)?
	RULE_INT
;

// Rule UCMmap
ruleUCMmap:
	'singleton'
	?
	'map'
	ruleQualifiedName
	ruleLongName
	'{'
	ruleStubDeclaration
	*
	rulePath
	*
	ruleComponentRef
	*
	'}'
;

// Rule Path
rulePath:
	ruleStartPoint
	rulePathBody
;

// Rule StartPoint
ruleStartPoint:
	(
		'start'
		(
			ruleQualifiedName
			ruleLongName
		)?
		ruleCondition
		?
		    |
		ruleFailureKind
		ruleQualifiedName
		ruleLongName
		(
			'catches'
			'[['
			RULE_STRING
			']]'
		)?
	)
;

// Rule FailureKind
ruleFailureKind:
	(
		'abort'
		    |
		'failure'
	)
;

// Rule PathBody
rulePathBody:
	rulePathWithRegularEnd
;

// Rule PathWithRegularEnd
rulePathWithRegularEnd:
	rulePathWithReferencedEnd
	ruleRegularEnd
	?
;

// Rule PathWithReferencedEnd
rulePathWithReferencedEnd:
	rulePathWithReferencedStub
	(
		RULE_ID
		?
		';'
	)?
;

// Rule PathWithReferencedStub
rulePathWithReferencedStub:
	rulePathBodyNodes
	(
		'in'
		ruleQualifiedName
		rulePositiveInteger
		';'
	)?
;

// Rule PathBodyNodes
rulePathBodyNodes:
	ruleArrow
	(
		rulePathBodyNode
		'->'
	)*
;

// Rule Arrow
ruleArrow:
	'->'
;

// Rule PathBodyNode
rulePathBodyNode:
	(
		ruleAndJoin
		    |
		ruleRespRef
		    |
		ruleOrJoin
		    |
		ruleWaitingPlace
		    |
		ruleFailurePoint
		    |
		ruleTimer
		    |
		ruleConnect
	)
;

// Rule RegularEnd
ruleRegularEnd:
	(
		ruleEndpointWithConnect
		    |
		ruleAndFork
		    |
		ruleOrFork
		    |
		ruleStub
	)
;

// Rule EndpointWithConnect
ruleEndpointWithConnect:
	ruleEndPoint
	(
		'->'
		ruleConnect
	)?
;

// Rule RespRef
ruleRespRef:
	'X'
	ruleQualifiedName
	ruleLongName
;

// Rule OrJoin
ruleOrJoin:
	'join'
	ruleQualifiedName
	ruleLongName
;

// Rule AndJoin
ruleAndJoin:
	(
		'synch'
		    |
		'sync'
		    |
		'|'
	)
	ruleQualifiedName
	ruleLongName
;

// Rule WaitingPlace
ruleWaitingPlace:
	ruleWAITKIND
	?
	'wait'
	(
		ruleQualifiedName
		ruleLongName
	)?
	ruleCondition
	?
;

// Rule Timer
ruleTimer:
	ruleWAITKIND
	?
	'timer'
	(
		ruleQualifiedName
		ruleLongName
	)?
	(
		'{'
		'timeout'?
		ruleCondition
		?
		rulePathBody
		?
		'}'
	)?
	ruleCondition
	?
;

// Rule Connect
ruleConnect:
	'trigger'
	ruleQualifiedName
	';'
;

// Rule FailurePoint
ruleFailurePoint:
	'fail'
	(
		ruleQualifiedName
		ruleLongName
	)?
	(
		ruleCondition
		ruleFailureLabel
		    |
		ruleFailureLabel
		ruleCondition
	)?
;

// Rule EndPoint
ruleEndPoint:
	'end'
	(
		ruleQualifiedName
		ruleLongName
	)?
	ruleCondition
	?
	'.'
;

// Rule OrFork
ruleOrFork:
	'or'
	(
		(
			ruleQualifiedName
			ruleLongName
		)?
		'{'
		ruleOrBody
		'}'
		    |
		ruleCondition
	)
	rulePathBody
	?
;

// Rule OrBody
ruleOrBody:
	ruleElseOrForkBody
;

// Rule ElseOrForkBody
ruleElseOrForkBody:
	ruleOrForkBody
	(
		'[else]'
		rulePathBody
	)?
;

// Rule OrForkBody
ruleOrForkBody:
	ruleRegularOrFork
	+
;

// Rule RegularOrFork
ruleRegularOrFork:
	ruleCondition
	rulePathBody
;

// Rule AndFork
ruleAndFork:
	'and'
	(
		ruleQualifiedName
		ruleLongName
	)?
	'{'
	(
		'*'
		rulePathBody
	)*
	'}'
	rulePathBody
	?
;

// Rule Stub
ruleStub:
	ruleStubType
	?
	'stub'
	(
		'in'
		rulePositiveInteger
	)?
	(
		(
			ruleQualifiedName
			ruleLongName
		)?
		ruleStubParameters
		    |
		ruleQualifiedName
	)
	(
		'{'
		ruleStubOutPath
		*
		'}'
	)?
	rulePathBody
	?
;

// Rule StubType
ruleStubType:
	(
		'synchronizing'
		    |
		'blocking'
	)
;

// Rule StubParameters
ruleStubParameters:
	'('
	rulePluginBinding
	*
	')'
;

// Rule StubDeclaration
ruleStubDeclaration:
	ruleQualifiedName
	ruleLongName
	'='
	ruleStubParameters
;

// Rule StubOutPath
ruleStubOutPath:
	'out'
	rulePositiveInteger
	(
		'threshold'
		'['
		rulePositiveInteger
		']'
	)?
	rulePathBody
;

// Rule PluginBinding
rulePluginBinding:
	ruleCondition
	?
	(
		'replication'
		rulePositiveInteger
	)?
	RULE_ID
	(
		':'
		ruleBinding
		(
			','
			ruleBinding
		)*
	)?
;

// Rule ComponentRef
ruleComponentRef:
	'protected'?
	ruleCOMPONENTKIND
	?
	ruleQualifiedName
	ruleLongName
	(
		':'
		ruleBoundOption
		(
			','
			ruleBoundOption
		)*
	)?
;

// Rule BoundOption
ruleBoundOption:
	(
		ruleBoundElement
		    |
		ruleLongBoundElement
	)
;

// Rule BoundElement
ruleBoundElement:
	ruleQualifiedName
;

// Rule LongBoundElement
ruleLongBoundElement:
	ruleQualifiedName
	'..'
	ruleQualifiedName
;

// Rule Binding
ruleBinding:
	(
		ruleInBinding
		    |
		ruleOutBinding
		    |
		ruleComponentBinding
	)
;

// Rule InBinding
ruleInBinding:
	ruleQualifiedName
	'='
	'in'
	rulePositiveInteger
;

// Rule OutBinding
ruleOutBinding:
	ruleQualifiedName
	'='
	'out'
	rulePositiveInteger
;

// Rule ComponentBinding
ruleComponentBinding:
	ruleQualifiedName
	'='
	ruleQualifiedName
;

// Rule FailureLabel
ruleFailureLabel:
	'[['
	RULE_STRING
	']]'
;

// Rule ScenarioGroup
ruleScenarioGroup:
	'scenarioGroup'
	ruleQualifiedName
	ruleLongName
	':'
	ruleReferenceToScenarioDef
	(
		','
		ruleReferenceToScenarioDef
	)*
;

// Rule ScenarioDef
ruleScenarioDef:
	'scenario'
	ruleQualifiedName
	ruleLongName
	'{'
	(
		'pre'
		ruleCondition
	)*
	(
		'post'
		ruleCondition
	)*
	(
		'initialize'
		ruleInitialization
	)*
	(
		'start'
		ruleQualifiedReferenceToStartPoint
		(
			','
			ruleQualifiedReferenceToStartPoint
		)*
	)?
	(
		'end'
		ruleQualifiedReferenceToEndPoint
		(
			','
			ruleQualifiedReferenceToEndPoint
		)*
	)?
	(
		'includes'
		ruleReferenceToScenarioDef
		(
			','
			ruleReferenceToScenarioDef
		)*
	)?
	'}'
;

// Rule Initialization
ruleInitialization:
	(
		ruleReferenceToVariable
		'='
		ruleExpression
		    |
		ruleReferenceToEnumVariable
		'='
		ruleEnumLiteral
	)
;

// Rule Variable
ruleVariable:
	(
		'bool'
		    |
		'int'
		    |
		ruleReferenceToEnumerationType
	)
	ruleQualifiedName
;

// Rule EnumerationType
ruleEnumerationType:
	'enum'
	RULE_ID
	':'
	ruleEnumLiteral
	(
		','
		ruleEnumLiteral
	)*
;

// Rule ReferenceToScenarioDef
ruleReferenceToScenarioDef:
	ruleQualifiedName
	ruleLongName
;

// Rule ReferenceToVariable
ruleReferenceToVariable:
	RULE_ID
;

// Rule ReferenceToEnumVariable
ruleReferenceToEnumVariable:
	RULE_ID
;

// Rule ReferenceToEnumerationType
ruleReferenceToEnumerationType:
	RULE_ID
;

// Rule QualifiedReferenceToStartPoint
ruleQualifiedReferenceToStartPoint:
	ruleQualifiedName
;

// Rule QualifiedReferenceToEndPoint
ruleQualifiedReferenceToEndPoint:
	ruleQualifiedName
;

// Rule Expression
ruleExpression:
	RULE_STRING
;

// Rule EnumLiteral
ruleEnumLiteral:
	RULE_ID
;

// Rule PositiveInteger
rulePositiveInteger:
	RULE_INT
;

// Rule Text
ruleText:
	ruleTextContent
	+
;

// Rule TextContent
ruleTextContent:
	(
		RULE_ID
		    |
		'@'
		    |
		'#'
		    |
		'!'
		    |
		'%'
		    |
		'&'
		    |
		'*'
		    |
		RULE_INT
	)
;

// Rule QualifiedName
ruleQualifiedName:
	RULE_ID
	(
		'.'
		RULE_ID
	)*
;

// Rule QualitativeLabel
ruleQualitativeLabel:
	(
		'denied'
		    |
		'weaklyDenied'
		    |
		'weaklySatisfied'
		    |
		'satisfied'
		    |
		'conflict'
		    |
		'unknown'
		    |
		'none'
	)
;

// Rule IntentionalElementType
ruleIntentionalElementType:
	(
		'softgoal'
		    |
		'goal'
		    |
		'task'
		    |
		'resource'
		    |
		'belief'
		    |
		'indicator'
	)
;

// Rule ContributionType
ruleContributionType:
	(
		'make'
		    |
		'help'
		    |
		'somePositive'
		    |
		'unknown'
		    |
		'someNegative'
		    |
		'hurt'
		    |
		'break'
	)
;

// Rule ImportanceType
ruleImportanceType:
	(
		'high'
		    |
		'medium'
		    |
		'low'
		    |
		'none'
	)
;

// Rule DecompositionType
ruleDecompositionType:
	(
		'and'
		    |
		'or'
		    |
		'xor'
	)
;

// Rule WAITKIND
ruleWAITKIND:
	(
		'persistent'
		    |
		'transient'
	)
;

// Rule COMPONENTKIND
ruleCOMPONENTKIND:
	(
		'team'
		    |
		'object'
		    |
		'process'
		    |
		'agent'
		    |
		'actor'
		    |
		'parent'
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
