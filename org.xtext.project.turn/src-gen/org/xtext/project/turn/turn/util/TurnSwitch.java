/**
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.turn.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.project.turn.turn.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.project.turn.turn.TurnPackage
 * @generated
 */
public class TurnSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TurnPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TurnSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = TurnPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case TurnPackage.UR_NSPEC:
      {
        URNspec urNspec = (URNspec)theEObject;
        T result = caseURNspec(urNspec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONCRETE_UR_NSPEC:
      {
        ConcreteURNspec concreteURNspec = (ConcreteURNspec)theEObject;
        T result = caseConcreteURNspec(concreteURNspec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONCERN:
      {
        Concern concern = (Concern)theEObject;
        T result = caseConcern(concern);
        if (result == null) result = caseURNmodelElement(concern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.LONG_NAME:
      {
        LongName longName = (LongName)theEObject;
        T result = caseLongName(longName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONCRETE_CONDITION:
      {
        ConcreteCondition concreteCondition = (ConcreteCondition)theEObject;
        T result = caseConcreteCondition(concreteCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.UR_NLINK:
      {
        URNlink urNlink = (URNlink)theEObject;
        T result = caseURNlink(urNlink);
        if (result == null) result = caseURNmodelElement(urNlink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.METADATA:
      {
        Metadata metadata = (Metadata)theEObject;
        T result = caseMetadata(metadata);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.UR_NMODEL_ELEMENT:
      {
        URNmodelElement urNmodelElement = (URNmodelElement)theEObject;
        T result = caseURNmodelElement(urNmodelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.ACTOR:
      {
        Actor actor = (Actor)theEObject;
        T result = caseActor(actor);
        if (result == null) result = caseURNmodelElement(actor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.INTENTIONAL_ELEMENT:
      {
        IntentionalElement intentionalElement = (IntentionalElement)theEObject;
        T result = caseIntentionalElement(intentionalElement);
        if (result == null) result = caseURNmodelElement(intentionalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.ELEMENT_LINK:
      {
        ElementLink elementLink = (ElementLink)theEObject;
        T result = caseElementLink(elementLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONTRIBUTION:
      {
        Contribution contribution = (Contribution)theEObject;
        T result = caseContribution(contribution);
        if (result == null) result = caseURNmodelElement(contribution);
        if (result == null) result = caseElementLink(contribution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.DECOMPOSITION:
      {
        Decomposition decomposition = (Decomposition)theEObject;
        T result = caseDecomposition(decomposition);
        if (result == null) result = caseURNmodelElement(decomposition);
        if (result == null) result = caseElementLink(decomposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.DEPENDENCY:
      {
        Dependency dependency = (Dependency)theEObject;
        T result = caseDependency(dependency);
        if (result == null) result = caseURNmodelElement(dependency);
        if (result == null) result = caseElementLink(dependency);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.ARTIFICIAL_RULE:
      {
        ArtificialRule artificialRule = (ArtificialRule)theEObject;
        T result = caseArtificialRule(artificialRule);
        if (result == null) result = caseURNmodelElement(artificialRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.STRATEGIES_GROUP:
      {
        StrategiesGroup strategiesGroup = (StrategiesGroup)theEObject;
        T result = caseStrategiesGroup(strategiesGroup);
        if (result == null) result = caseURNmodelElement(strategiesGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.EVALUATION_STRATEGY:
      {
        EvaluationStrategy evaluationStrategy = (EvaluationStrategy)theEObject;
        T result = caseEvaluationStrategy(evaluationStrategy);
        if (result == null) result = caseURNmodelElement(evaluationStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONCRETE_STRATEGY:
      {
        ConcreteStrategy concreteStrategy = (ConcreteStrategy)theEObject;
        T result = caseConcreteStrategy(concreteStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.EVALUATION:
      {
        Evaluation evaluation = (Evaluation)theEObject;
        T result = caseEvaluation(evaluation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.INDICATOR_EVALUATION:
      {
        IndicatorEvaluation indicatorEvaluation = (IndicatorEvaluation)theEObject;
        T result = caseIndicatorEvaluation(indicatorEvaluation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.INDICATOR_CONVERSION:
      {
        IndicatorConversion indicatorConversion = (IndicatorConversion)theEObject;
        T result = caseIndicatorConversion(indicatorConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.LINEAR_CONVERSION:
      {
        LinearConversion linearConversion = (LinearConversion)theEObject;
        T result = caseLinearConversion(linearConversion);
        if (result == null) result = caseURNmodelElement(linearConversion);
        if (result == null) result = caseIndicatorConversion(linearConversion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.QUAL_TO_QMAPPINGS:
      {
        QualToQMappings qualToQMappings = (QualToQMappings)theEObject;
        T result = caseQualToQMappings(qualToQMappings);
        if (result == null) result = caseURNmodelElement(qualToQMappings);
        if (result == null) result = caseIndicatorConversion(qualToQMappings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.QUAL_TO_QMAPPING:
      {
        QualToQMapping qualToQMapping = (QualToQMapping)theEObject;
        T result = caseQualToQMapping(qualToQMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONTRIBUTION_CONTEXT_GROUP:
      {
        ContributionContextGroup contributionContextGroup = (ContributionContextGroup)theEObject;
        T result = caseContributionContextGroup(contributionContextGroup);
        if (result == null) result = caseURNmodelElement(contributionContextGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONTRIBUTION_CONTEXT:
      {
        ContributionContext contributionContext = (ContributionContext)theEObject;
        T result = caseContributionContext(contributionContext);
        if (result == null) result = caseURNmodelElement(contributionContext);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONTRIBUTION_CHANGE:
      {
        ContributionChange contributionChange = (ContributionChange)theEObject;
        T result = caseContributionChange(contributionChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.UC_MMAP:
      {
        UCMmap ucMmap = (UCMmap)theEObject;
        T result = caseUCMmap(ucMmap);
        if (result == null) result = caseURNmodelElement(ucMmap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.PATH:
      {
        Path path = (Path)theEObject;
        T result = casePath(path);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.START_POINT:
      {
        StartPoint startPoint = (StartPoint)theEObject;
        T result = caseStartPoint(startPoint);
        if (result == null) result = caseURNmodelElement(startPoint);
        if (result == null) result = caseConnectElement(startPoint);
        if (result == null) result = caseReferencedBoundElement(startPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.PATH_BODY:
      {
        PathBody pathBody = (PathBody)theEObject;
        T result = casePathBody(pathBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.PATH_BODY_NODE:
      {
        PathBodyNode pathBodyNode = (PathBodyNode)theEObject;
        T result = casePathBodyNode(pathBodyNode);
        if (result == null) result = caseReferencedBoundElement(pathBodyNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.REGULAR_END:
      {
        RegularEnd regularEnd = (RegularEnd)theEObject;
        T result = caseRegularEnd(regularEnd);
        if (result == null) result = caseReferencedBoundElement(regularEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.ENDPOINT_WITH_CONNECT:
      {
        EndpointWithConnect endpointWithConnect = (EndpointWithConnect)theEObject;
        T result = caseEndpointWithConnect(endpointWithConnect);
        if (result == null) result = caseRegularEnd(endpointWithConnect);
        if (result == null) result = caseReferencedBoundElement(endpointWithConnect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.REFERENCED_END:
      {
        ReferencedEnd referencedEnd = (ReferencedEnd)theEObject;
        T result = caseReferencedEnd(referencedEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.RESP_REF:
      {
        RespRef respRef = (RespRef)theEObject;
        T result = caseRespRef(respRef);
        if (result == null) result = caseURNmodelElement(respRef);
        if (result == null) result = casePathBodyNode(respRef);
        if (result == null) result = caseReferencedEnd(respRef);
        if (result == null) result = caseReferencedBoundElement(respRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.OR_JOIN:
      {
        OrJoin orJoin = (OrJoin)theEObject;
        T result = caseOrJoin(orJoin);
        if (result == null) result = caseURNmodelElement(orJoin);
        if (result == null) result = casePathBodyNode(orJoin);
        if (result == null) result = caseReferencedEnd(orJoin);
        if (result == null) result = caseReferencedBoundElement(orJoin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.AND_JOIN:
      {
        AndJoin andJoin = (AndJoin)theEObject;
        T result = caseAndJoin(andJoin);
        if (result == null) result = caseURNmodelElement(andJoin);
        if (result == null) result = casePathBodyNode(andJoin);
        if (result == null) result = caseReferencedEnd(andJoin);
        if (result == null) result = caseReferencedBoundElement(andJoin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.WAITING_PLACE:
      {
        WaitingPlace waitingPlace = (WaitingPlace)theEObject;
        T result = caseWaitingPlace(waitingPlace);
        if (result == null) result = caseURNmodelElement(waitingPlace);
        if (result == null) result = casePathBodyNode(waitingPlace);
        if (result == null) result = caseConnectElement(waitingPlace);
        if (result == null) result = caseReferencedBoundElement(waitingPlace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.TIMER:
      {
        Timer timer = (Timer)theEObject;
        T result = caseTimer(timer);
        if (result == null) result = caseURNmodelElement(timer);
        if (result == null) result = casePathBodyNode(timer);
        if (result == null) result = caseConnectElement(timer);
        if (result == null) result = caseReferencedBoundElement(timer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONNECT:
      {
        Connect connect = (Connect)theEObject;
        T result = caseConnect(connect);
        if (result == null) result = casePathBodyNode(connect);
        if (result == null) result = caseReferencedBoundElement(connect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.CONNECT_ELEMENT:
      {
        ConnectElement connectElement = (ConnectElement)theEObject;
        T result = caseConnectElement(connectElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.FAILURE_POINT:
      {
        FailurePoint failurePoint = (FailurePoint)theEObject;
        T result = caseFailurePoint(failurePoint);
        if (result == null) result = caseURNmodelElement(failurePoint);
        if (result == null) result = casePathBodyNode(failurePoint);
        if (result == null) result = caseReferencedEnd(failurePoint);
        if (result == null) result = caseReferencedBoundElement(failurePoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.END_POINT:
      {
        EndPoint endPoint = (EndPoint)theEObject;
        T result = caseEndPoint(endPoint);
        if (result == null) result = caseReferencedBoundElement(endPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.OR_FORK:
      {
        OrFork orFork = (OrFork)theEObject;
        T result = caseOrFork(orFork);
        if (result == null) result = caseURNmodelElement(orFork);
        if (result == null) result = caseRegularEnd(orFork);
        if (result == null) result = caseReferencedBoundElement(orFork);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.OR_BODY:
      {
        OrBody orBody = (OrBody)theEObject;
        T result = caseOrBody(orBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.REGULAR_OR_FORK:
      {
        RegularOrFork regularOrFork = (RegularOrFork)theEObject;
        T result = caseRegularOrFork(regularOrFork);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.AND_FORK:
      {
        AndFork andFork = (AndFork)theEObject;
        T result = caseAndFork(andFork);
        if (result == null) result = caseURNmodelElement(andFork);
        if (result == null) result = caseRegularEnd(andFork);
        if (result == null) result = caseReferencedBoundElement(andFork);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.STUB:
      {
        Stub stub = (Stub)theEObject;
        T result = caseStub(stub);
        if (result == null) result = caseURNmodelElement(stub);
        if (result == null) result = caseRegularEnd(stub);
        if (result == null) result = caseReferencedBoundElement(stub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.STUB_PARAMETERS:
      {
        StubParameters stubParameters = (StubParameters)theEObject;
        T result = caseStubParameters(stubParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.STUB_DECLARATION:
      {
        StubDeclaration stubDeclaration = (StubDeclaration)theEObject;
        T result = caseStubDeclaration(stubDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.STUB_OUT_PATH:
      {
        StubOutPath stubOutPath = (StubOutPath)theEObject;
        T result = caseStubOutPath(stubOutPath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.PLUGIN_BINDING:
      {
        PluginBinding pluginBinding = (PluginBinding)theEObject;
        T result = casePluginBinding(pluginBinding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.COMPONENT_REF:
      {
        ComponentRef componentRef = (ComponentRef)theEObject;
        T result = caseComponentRef(componentRef);
        if (result == null) result = caseURNmodelElement(componentRef);
        if (result == null) result = caseReferencedBoundElement(componentRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.BOUND_OPTION:
      {
        BoundOption boundOption = (BoundOption)theEObject;
        T result = caseBoundOption(boundOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.BOUND_ELEMENT:
      {
        BoundElement boundElement = (BoundElement)theEObject;
        T result = caseBoundElement(boundElement);
        if (result == null) result = caseBoundOption(boundElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.REFERENCED_BOUND_ELEMENT:
      {
        ReferencedBoundElement referencedBoundElement = (ReferencedBoundElement)theEObject;
        T result = caseReferencedBoundElement(referencedBoundElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.LONG_BOUND_ELEMENT:
      {
        LongBoundElement longBoundElement = (LongBoundElement)theEObject;
        T result = caseLongBoundElement(longBoundElement);
        if (result == null) result = caseBoundOption(longBoundElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.BINDING:
      {
        Binding binding = (Binding)theEObject;
        T result = caseBinding(binding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.IN_BINDING:
      {
        InBinding inBinding = (InBinding)theEObject;
        T result = caseInBinding(inBinding);
        if (result == null) result = caseBinding(inBinding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.OUT_BINDING:
      {
        OutBinding outBinding = (OutBinding)theEObject;
        T result = caseOutBinding(outBinding);
        if (result == null) result = caseBinding(outBinding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.COMPONENT_BINDING:
      {
        ComponentBinding componentBinding = (ComponentBinding)theEObject;
        T result = caseComponentBinding(componentBinding);
        if (result == null) result = caseBinding(componentBinding);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.FAILURE_LABEL:
      {
        FailureLabel failureLabel = (FailureLabel)theEObject;
        T result = caseFailureLabel(failureLabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.TEXT:
      {
        Text text = (Text)theEObject;
        T result = caseText(text);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TurnPackage.PATH_BODY_NODES:
      {
        PathBodyNodes pathBodyNodes = (PathBodyNodes)theEObject;
        T result = casePathBodyNodes(pathBodyNodes);
        if (result == null) result = casePathBody(pathBodyNodes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UR Nspec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UR Nspec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseURNspec(URNspec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete UR Nspec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete UR Nspec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteURNspec(ConcreteURNspec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcern(Concern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongName(LongName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteCondition(ConcreteCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UR Nlink</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UR Nlink</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseURNlink(URNlink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metadata</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metadata</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetadata(Metadata object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UR Nmodel Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UR Nmodel Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseURNmodelElement(URNmodelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Actor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Actor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActor(Actor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Intentional Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Intentional Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntentionalElement(IntentionalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementLink(ElementLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contribution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contribution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContribution(Contribution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decomposition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decomposition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecomposition(Decomposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dependency</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dependency</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDependency(Dependency object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Artificial Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Artificial Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArtificialRule(ArtificialRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Strategies Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Strategies Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStrategiesGroup(StrategiesGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evaluation Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evaluation Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvaluationStrategy(EvaluationStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteStrategy(ConcreteStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evaluation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evaluation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvaluation(Evaluation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indicator Evaluation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indicator Evaluation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndicatorEvaluation(IndicatorEvaluation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indicator Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indicator Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndicatorConversion(IndicatorConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linear Conversion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linear Conversion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinearConversion(LinearConversion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qual To QMappings</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qual To QMappings</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualToQMappings(QualToQMappings object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qual To QMapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qual To QMapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualToQMapping(QualToQMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contribution Context Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contribution Context Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContributionContextGroup(ContributionContextGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contribution Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contribution Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContributionContext(ContributionContext object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contribution Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contribution Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContributionChange(ContributionChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UC Mmap</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UC Mmap</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUCMmap(UCMmap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePath(Path object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartPoint(StartPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathBody(PathBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Body Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Body Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathBodyNode(PathBodyNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularEnd(RegularEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Endpoint With Connect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Endpoint With Connect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndpointWithConnect(EndpointWithConnect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Referenced End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Referenced End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferencedEnd(ReferencedEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resp Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resp Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRespRef(RespRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Join</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Join</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrJoin(OrJoin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Join</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Join</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndJoin(AndJoin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Waiting Place</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Waiting Place</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWaitingPlace(WaitingPlace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimer(Timer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnect(Connect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connect Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connect Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectElement(ConnectElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Failure Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Failure Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFailurePoint(FailurePoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndPoint(EndPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Fork</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Fork</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrFork(OrFork object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrBody(OrBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Regular Or Fork</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Regular Or Fork</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegularOrFork(RegularOrFork object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Fork</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Fork</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndFork(AndFork object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStub(Stub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stub Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stub Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStubParameters(StubParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stub Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stub Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStubDeclaration(StubDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stub Out Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stub Out Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStubOutPath(StubOutPath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plugin Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plugin Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePluginBinding(PluginBinding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentRef(ComponentRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundOption(BoundOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bound Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bound Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoundElement(BoundElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Referenced Bound Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Referenced Bound Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferencedBoundElement(ReferencedBoundElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Bound Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Bound Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongBoundElement(LongBoundElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinding(Binding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInBinding(InBinding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutBinding(OutBinding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Binding</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Binding</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentBinding(ComponentBinding object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Failure Label</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Failure Label</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFailureLabel(FailureLabel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseText(Text object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Body Nodes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Body Nodes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathBodyNodes(PathBodyNodes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //TurnSwitch
