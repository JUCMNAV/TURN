/**
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.turn.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.project.turn.turn.LongName;
import org.xtext.project.turn.turn.PathBody;
import org.xtext.project.turn.turn.Stub;
import org.xtext.project.turn.turn.StubDeclaration;
import org.xtext.project.turn.turn.StubOutPath;
import org.xtext.project.turn.turn.StubParameters;
import org.xtext.project.turn.turn.TurnPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Stub</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getStubType <em>Stub Type</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getLongName <em>Long Name</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getParams <em>Params</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getStubRef <em>Stub Ref</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getOutPaths <em>Out Paths</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.StubImpl#getConnectingStubBody <em>Connecting Stub Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StubImpl extends URNmodelElementImpl implements Stub
{
  /**
   * The default value of the '{@link #getStubType() <em>Stub Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStubType()
   * @generated
   * @ordered
   */
  protected static final String STUB_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStubType() <em>Stub Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStubType()
   * @generated
   * @ordered
   */
  protected String stubType = STUB_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected static final int INDEX_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected int index = INDEX_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLongName() <em>Long Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLongName()
   * @generated
   * @ordered
   */
  protected LongName longName;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected StubParameters params;

  /**
   * The cached value of the '{@link #getStubRef() <em>Stub Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStubRef()
   * @generated
   * @ordered
   */
  protected StubDeclaration stubRef;

  /**
   * The cached value of the '{@link #getOutPaths() <em>Out Paths</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutPaths()
   * @generated
   * @ordered
   */
  protected EList<StubOutPath> outPaths;

  /**
   * The cached value of the '{@link #getConnectingStubBody() <em>Connecting Stub Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectingStubBody()
   * @generated
   * @ordered
   */
  protected PathBody connectingStubBody;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StubImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TurnPackage.Literals.STUB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStubType()
  {
    return stubType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStubType(String newStubType)
  {
    String oldStubType = stubType;
    stubType = newStubType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__STUB_TYPE, oldStubType, stubType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndex(int newIndex)
  {
    int oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongName getLongName()
  {
    return longName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLongName(LongName newLongName, NotificationChain msgs)
  {
    LongName oldLongName = longName;
    longName = newLongName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__LONG_NAME, oldLongName, newLongName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLongName(LongName newLongName)
  {
    if (newLongName != longName)
    {
      NotificationChain msgs = null;
      if (longName != null)
        msgs = ((InternalEObject)longName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__LONG_NAME, null, msgs);
      if (newLongName != null)
        msgs = ((InternalEObject)newLongName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__LONG_NAME, null, msgs);
      msgs = basicSetLongName(newLongName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__LONG_NAME, newLongName, newLongName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubParameters getParams()
  {
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParams(StubParameters newParams, NotificationChain msgs)
  {
    StubParameters oldParams = params;
    params = newParams;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__PARAMS, oldParams, newParams);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParams(StubParameters newParams)
  {
    if (newParams != params)
    {
      NotificationChain msgs = null;
      if (params != null)
        msgs = ((InternalEObject)params).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__PARAMS, null, msgs);
      if (newParams != null)
        msgs = ((InternalEObject)newParams).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__PARAMS, null, msgs);
      msgs = basicSetParams(newParams, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__PARAMS, newParams, newParams));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubDeclaration getStubRef()
  {
    if (stubRef != null && stubRef.eIsProxy())
    {
      InternalEObject oldStubRef = (InternalEObject)stubRef;
      stubRef = (StubDeclaration)eResolveProxy(oldStubRef);
      if (stubRef != oldStubRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TurnPackage.STUB__STUB_REF, oldStubRef, stubRef));
      }
    }
    return stubRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubDeclaration basicGetStubRef()
  {
    return stubRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStubRef(StubDeclaration newStubRef)
  {
    StubDeclaration oldStubRef = stubRef;
    stubRef = newStubRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__STUB_REF, oldStubRef, stubRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StubOutPath> getOutPaths()
  {
    if (outPaths == null)
    {
      outPaths = new EObjectContainmentEList<StubOutPath>(StubOutPath.class, this, TurnPackage.STUB__OUT_PATHS);
    }
    return outPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBody getConnectingStubBody()
  {
    return connectingStubBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConnectingStubBody(PathBody newConnectingStubBody, NotificationChain msgs)
  {
    PathBody oldConnectingStubBody = connectingStubBody;
    connectingStubBody = newConnectingStubBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__CONNECTING_STUB_BODY, oldConnectingStubBody, newConnectingStubBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConnectingStubBody(PathBody newConnectingStubBody)
  {
    if (newConnectingStubBody != connectingStubBody)
    {
      NotificationChain msgs = null;
      if (connectingStubBody != null)
        msgs = ((InternalEObject)connectingStubBody).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__CONNECTING_STUB_BODY, null, msgs);
      if (newConnectingStubBody != null)
        msgs = ((InternalEObject)newConnectingStubBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.STUB__CONNECTING_STUB_BODY, null, msgs);
      msgs = basicSetConnectingStubBody(newConnectingStubBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.STUB__CONNECTING_STUB_BODY, newConnectingStubBody, newConnectingStubBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TurnPackage.STUB__LONG_NAME:
        return basicSetLongName(null, msgs);
      case TurnPackage.STUB__PARAMS:
        return basicSetParams(null, msgs);
      case TurnPackage.STUB__OUT_PATHS:
        return ((InternalEList<?>)getOutPaths()).basicRemove(otherEnd, msgs);
      case TurnPackage.STUB__CONNECTING_STUB_BODY:
        return basicSetConnectingStubBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TurnPackage.STUB__STUB_TYPE:
        return getStubType();
      case TurnPackage.STUB__INDEX:
        return getIndex();
      case TurnPackage.STUB__NAME:
        return getName();
      case TurnPackage.STUB__LONG_NAME:
        return getLongName();
      case TurnPackage.STUB__PARAMS:
        return getParams();
      case TurnPackage.STUB__STUB_REF:
        if (resolve) return getStubRef();
        return basicGetStubRef();
      case TurnPackage.STUB__OUT_PATHS:
        return getOutPaths();
      case TurnPackage.STUB__CONNECTING_STUB_BODY:
        return getConnectingStubBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TurnPackage.STUB__STUB_TYPE:
        setStubType((String)newValue);
        return;
      case TurnPackage.STUB__INDEX:
        setIndex((Integer)newValue);
        return;
      case TurnPackage.STUB__NAME:
        setName((String)newValue);
        return;
      case TurnPackage.STUB__LONG_NAME:
        setLongName((LongName)newValue);
        return;
      case TurnPackage.STUB__PARAMS:
        setParams((StubParameters)newValue);
        return;
      case TurnPackage.STUB__STUB_REF:
        setStubRef((StubDeclaration)newValue);
        return;
      case TurnPackage.STUB__OUT_PATHS:
        getOutPaths().clear();
        getOutPaths().addAll((Collection<? extends StubOutPath>)newValue);
        return;
      case TurnPackage.STUB__CONNECTING_STUB_BODY:
        setConnectingStubBody((PathBody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.STUB__STUB_TYPE:
        setStubType(STUB_TYPE_EDEFAULT);
        return;
      case TurnPackage.STUB__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
      case TurnPackage.STUB__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TurnPackage.STUB__LONG_NAME:
        setLongName((LongName)null);
        return;
      case TurnPackage.STUB__PARAMS:
        setParams((StubParameters)null);
        return;
      case TurnPackage.STUB__STUB_REF:
        setStubRef((StubDeclaration)null);
        return;
      case TurnPackage.STUB__OUT_PATHS:
        getOutPaths().clear();
        return;
      case TurnPackage.STUB__CONNECTING_STUB_BODY:
        setConnectingStubBody((PathBody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.STUB__STUB_TYPE:
        return STUB_TYPE_EDEFAULT == null ? stubType != null : !STUB_TYPE_EDEFAULT.equals(stubType);
      case TurnPackage.STUB__INDEX:
        return index != INDEX_EDEFAULT;
      case TurnPackage.STUB__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TurnPackage.STUB__LONG_NAME:
        return longName != null;
      case TurnPackage.STUB__PARAMS:
        return params != null;
      case TurnPackage.STUB__STUB_REF:
        return stubRef != null;
      case TurnPackage.STUB__OUT_PATHS:
        return outPaths != null && !outPaths.isEmpty();
      case TurnPackage.STUB__CONNECTING_STUB_BODY:
        return connectingStubBody != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (stubType: ");
    result.append(stubType);
    result.append(", index: ");
    result.append(index);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //StubImpl
