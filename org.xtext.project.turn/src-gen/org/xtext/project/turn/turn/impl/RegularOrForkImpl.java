/**
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.turn.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.project.turn.turn.Condition;
import org.xtext.project.turn.turn.PathBody;
import org.xtext.project.turn.turn.RegularOrFork;
import org.xtext.project.turn.turn.TurnPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Regular Or Fork</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.turn.turn.impl.RegularOrForkImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.RegularOrForkImpl#getPathBody <em>Path Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RegularOrForkImpl extends MinimalEObjectImpl.Container implements RegularOrFork
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getPathBody() <em>Path Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathBody()
   * @generated
   * @ordered
   */
  protected PathBody pathBody;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RegularOrForkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TurnPackage.Literals.REGULAR_OR_FORK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.REGULAR_OR_FORK__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.REGULAR_OR_FORK__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.REGULAR_OR_FORK__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.REGULAR_OR_FORK__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBody getPathBody()
  {
    return pathBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPathBody(PathBody newPathBody, NotificationChain msgs)
  {
    PathBody oldPathBody = pathBody;
    pathBody = newPathBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.REGULAR_OR_FORK__PATH_BODY, oldPathBody, newPathBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPathBody(PathBody newPathBody)
  {
    if (newPathBody != pathBody)
    {
      NotificationChain msgs = null;
      if (pathBody != null)
        msgs = ((InternalEObject)pathBody).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.REGULAR_OR_FORK__PATH_BODY, null, msgs);
      if (newPathBody != null)
        msgs = ((InternalEObject)newPathBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.REGULAR_OR_FORK__PATH_BODY, null, msgs);
      msgs = basicSetPathBody(newPathBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.REGULAR_OR_FORK__PATH_BODY, newPathBody, newPathBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TurnPackage.REGULAR_OR_FORK__CONDITION:
        return basicSetCondition(null, msgs);
      case TurnPackage.REGULAR_OR_FORK__PATH_BODY:
        return basicSetPathBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TurnPackage.REGULAR_OR_FORK__CONDITION:
        return getCondition();
      case TurnPackage.REGULAR_OR_FORK__PATH_BODY:
        return getPathBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TurnPackage.REGULAR_OR_FORK__CONDITION:
        setCondition((Condition)newValue);
        return;
      case TurnPackage.REGULAR_OR_FORK__PATH_BODY:
        setPathBody((PathBody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.REGULAR_OR_FORK__CONDITION:
        setCondition((Condition)null);
        return;
      case TurnPackage.REGULAR_OR_FORK__PATH_BODY:
        setPathBody((PathBody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.REGULAR_OR_FORK__CONDITION:
        return condition != null;
      case TurnPackage.REGULAR_OR_FORK__PATH_BODY:
        return pathBody != null;
    }
    return super.eIsSet(featureID);
  }

} //RegularOrForkImpl
