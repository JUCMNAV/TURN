/**
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.turn.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.project.turn.turn.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TurnFactoryImpl extends EFactoryImpl implements TurnFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TurnFactory init()
  {
    try
    {
      TurnFactory theTurnFactory = (TurnFactory)EPackage.Registry.INSTANCE.getEFactory(TurnPackage.eNS_URI);
      if (theTurnFactory != null)
      {
        return theTurnFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TurnFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TurnFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TurnPackage.UR_NSPEC: return createURNspec();
      case TurnPackage.CONCRETE_UR_NSPEC: return createConcreteURNspec();
      case TurnPackage.CONCERN: return createConcern();
      case TurnPackage.LONG_NAME: return createLongName();
      case TurnPackage.CONDITION: return createCondition();
      case TurnPackage.CONCRETE_CONDITION: return createConcreteCondition();
      case TurnPackage.UR_NLINK: return createURNlink();
      case TurnPackage.METADATA: return createMetadata();
      case TurnPackage.UR_NMODEL_ELEMENT: return createURNmodelElement();
      case TurnPackage.ACTOR: return createActor();
      case TurnPackage.INTENTIONAL_ELEMENT: return createIntentionalElement();
      case TurnPackage.ELEMENT_LINK: return createElementLink();
      case TurnPackage.CONTRIBUTION: return createContribution();
      case TurnPackage.DECOMPOSITION: return createDecomposition();
      case TurnPackage.DEPENDENCY: return createDependency();
      case TurnPackage.ARTIFICIAL_RULE: return createArtificialRule();
      case TurnPackage.STRATEGIES_GROUP: return createStrategiesGroup();
      case TurnPackage.EVALUATION_STRATEGY: return createEvaluationStrategy();
      case TurnPackage.CONCRETE_STRATEGY: return createConcreteStrategy();
      case TurnPackage.EVALUATION: return createEvaluation();
      case TurnPackage.INDICATOR_EVALUATION: return createIndicatorEvaluation();
      case TurnPackage.INDICATOR_CONVERSION: return createIndicatorConversion();
      case TurnPackage.LINEAR_CONVERSION: return createLinearConversion();
      case TurnPackage.QUAL_TO_QMAPPINGS: return createQualToQMappings();
      case TurnPackage.QUAL_TO_QMAPPING: return createQualToQMapping();
      case TurnPackage.CONTRIBUTION_CONTEXT_GROUP: return createContributionContextGroup();
      case TurnPackage.CONTRIBUTION_CONTEXT: return createContributionContext();
      case TurnPackage.CONTRIBUTION_CHANGE: return createContributionChange();
      case TurnPackage.UC_MMAP: return createUCMmap();
      case TurnPackage.PATH: return createPath();
      case TurnPackage.START_POINT: return createStartPoint();
      case TurnPackage.PATH_BODY: return createPathBody();
      case TurnPackage.PATH_BODY_NODE: return createPathBodyNode();
      case TurnPackage.REGULAR_END: return createRegularEnd();
      case TurnPackage.ENDPOINT_WITH_CONNECT: return createEndpointWithConnect();
      case TurnPackage.REFERENCED_END: return createReferencedEnd();
      case TurnPackage.RESP_REF: return createRespRef();
      case TurnPackage.OR_JOIN: return createOrJoin();
      case TurnPackage.AND_JOIN: return createAndJoin();
      case TurnPackage.WAITING_PLACE: return createWaitingPlace();
      case TurnPackage.TIMER: return createTimer();
      case TurnPackage.CONNECT: return createConnect();
      case TurnPackage.CONNECT_ELEMENT: return createConnectElement();
      case TurnPackage.FAILURE_POINT: return createFailurePoint();
      case TurnPackage.END_POINT: return createEndPoint();
      case TurnPackage.OR_FORK: return createOrFork();
      case TurnPackage.OR_BODY: return createOrBody();
      case TurnPackage.REGULAR_OR_FORK: return createRegularOrFork();
      case TurnPackage.AND_FORK: return createAndFork();
      case TurnPackage.STUB: return createStub();
      case TurnPackage.STUB_PARAMETERS: return createStubParameters();
      case TurnPackage.STUB_DECLARATION: return createStubDeclaration();
      case TurnPackage.STUB_OUT_PATH: return createStubOutPath();
      case TurnPackage.PLUGIN_BINDING: return createPluginBinding();
      case TurnPackage.COMPONENT_REF: return createComponentRef();
      case TurnPackage.BOUND_OPTION: return createBoundOption();
      case TurnPackage.BOUND_ELEMENT: return createBoundElement();
      case TurnPackage.REFERENCED_BOUND_ELEMENT: return createReferencedBoundElement();
      case TurnPackage.LONG_BOUND_ELEMENT: return createLongBoundElement();
      case TurnPackage.BINDING: return createBinding();
      case TurnPackage.IN_BINDING: return createInBinding();
      case TurnPackage.OUT_BINDING: return createOutBinding();
      case TurnPackage.COMPONENT_BINDING: return createComponentBinding();
      case TurnPackage.FAILURE_LABEL: return createFailureLabel();
      case TurnPackage.TEXT: return createText();
      case TurnPackage.PATH_BODY_NODES: return createPathBodyNodes();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TurnPackage.QUALITATIVE_LABEL:
        return createQualitativeLabelFromString(eDataType, initialValue);
      case TurnPackage.INTENTIONAL_ELEMENT_TYPE:
        return createIntentionalElementTypeFromString(eDataType, initialValue);
      case TurnPackage.CONTRIBUTION_TYPE:
        return createContributionTypeFromString(eDataType, initialValue);
      case TurnPackage.IMPORTANCE_TYPE:
        return createImportanceTypeFromString(eDataType, initialValue);
      case TurnPackage.DECOMPOSITION_TYPE:
        return createDecompositionTypeFromString(eDataType, initialValue);
      case TurnPackage.WAITKIND:
        return createWAITKINDFromString(eDataType, initialValue);
      case TurnPackage.COMPONENTKIND:
        return createCOMPONENTKINDFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TurnPackage.QUALITATIVE_LABEL:
        return convertQualitativeLabelToString(eDataType, instanceValue);
      case TurnPackage.INTENTIONAL_ELEMENT_TYPE:
        return convertIntentionalElementTypeToString(eDataType, instanceValue);
      case TurnPackage.CONTRIBUTION_TYPE:
        return convertContributionTypeToString(eDataType, instanceValue);
      case TurnPackage.IMPORTANCE_TYPE:
        return convertImportanceTypeToString(eDataType, instanceValue);
      case TurnPackage.DECOMPOSITION_TYPE:
        return convertDecompositionTypeToString(eDataType, instanceValue);
      case TurnPackage.WAITKIND:
        return convertWAITKINDToString(eDataType, instanceValue);
      case TurnPackage.COMPONENTKIND:
        return convertCOMPONENTKINDToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNspec createURNspec()
  {
    URNspecImpl urNspec = new URNspecImpl();
    return urNspec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteURNspec createConcreteURNspec()
  {
    ConcreteURNspecImpl concreteURNspec = new ConcreteURNspecImpl();
    return concreteURNspec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concern createConcern()
  {
    ConcernImpl concern = new ConcernImpl();
    return concern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongName createLongName()
  {
    LongNameImpl longName = new LongNameImpl();
    return longName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteCondition createConcreteCondition()
  {
    ConcreteConditionImpl concreteCondition = new ConcreteConditionImpl();
    return concreteCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNlink createURNlink()
  {
    URNlinkImpl urNlink = new URNlinkImpl();
    return urNlink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata createMetadata()
  {
    MetadataImpl metadata = new MetadataImpl();
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNmodelElement createURNmodelElement()
  {
    URNmodelElementImpl urNmodelElement = new URNmodelElementImpl();
    return urNmodelElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntentionalElement createIntentionalElement()
  {
    IntentionalElementImpl intentionalElement = new IntentionalElementImpl();
    return intentionalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementLink createElementLink()
  {
    ElementLinkImpl elementLink = new ElementLinkImpl();
    return elementLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Contribution createContribution()
  {
    ContributionImpl contribution = new ContributionImpl();
    return contribution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Decomposition createDecomposition()
  {
    DecompositionImpl decomposition = new DecompositionImpl();
    return decomposition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArtificialRule createArtificialRule()
  {
    ArtificialRuleImpl artificialRule = new ArtificialRuleImpl();
    return artificialRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StrategiesGroup createStrategiesGroup()
  {
    StrategiesGroupImpl strategiesGroup = new StrategiesGroupImpl();
    return strategiesGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvaluationStrategy createEvaluationStrategy()
  {
    EvaluationStrategyImpl evaluationStrategy = new EvaluationStrategyImpl();
    return evaluationStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteStrategy createConcreteStrategy()
  {
    ConcreteStrategyImpl concreteStrategy = new ConcreteStrategyImpl();
    return concreteStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Evaluation createEvaluation()
  {
    EvaluationImpl evaluation = new EvaluationImpl();
    return evaluation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndicatorEvaluation createIndicatorEvaluation()
  {
    IndicatorEvaluationImpl indicatorEvaluation = new IndicatorEvaluationImpl();
    return indicatorEvaluation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndicatorConversion createIndicatorConversion()
  {
    IndicatorConversionImpl indicatorConversion = new IndicatorConversionImpl();
    return indicatorConversion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinearConversion createLinearConversion()
  {
    LinearConversionImpl linearConversion = new LinearConversionImpl();
    return linearConversion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualToQMappings createQualToQMappings()
  {
    QualToQMappingsImpl qualToQMappings = new QualToQMappingsImpl();
    return qualToQMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualToQMapping createQualToQMapping()
  {
    QualToQMappingImpl qualToQMapping = new QualToQMappingImpl();
    return qualToQMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContributionContextGroup createContributionContextGroup()
  {
    ContributionContextGroupImpl contributionContextGroup = new ContributionContextGroupImpl();
    return contributionContextGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContributionContext createContributionContext()
  {
    ContributionContextImpl contributionContext = new ContributionContextImpl();
    return contributionContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContributionChange createContributionChange()
  {
    ContributionChangeImpl contributionChange = new ContributionChangeImpl();
    return contributionChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UCMmap createUCMmap()
  {
    UCMmapImpl ucMmap = new UCMmapImpl();
    return ucMmap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StartPoint createStartPoint()
  {
    StartPointImpl startPoint = new StartPointImpl();
    return startPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBody createPathBody()
  {
    PathBodyImpl pathBody = new PathBodyImpl();
    return pathBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBodyNode createPathBodyNode()
  {
    PathBodyNodeImpl pathBodyNode = new PathBodyNodeImpl();
    return pathBodyNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularEnd createRegularEnd()
  {
    RegularEndImpl regularEnd = new RegularEndImpl();
    return regularEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndpointWithConnect createEndpointWithConnect()
  {
    EndpointWithConnectImpl endpointWithConnect = new EndpointWithConnectImpl();
    return endpointWithConnect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferencedEnd createReferencedEnd()
  {
    ReferencedEndImpl referencedEnd = new ReferencedEndImpl();
    return referencedEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RespRef createRespRef()
  {
    RespRefImpl respRef = new RespRefImpl();
    return respRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrJoin createOrJoin()
  {
    OrJoinImpl orJoin = new OrJoinImpl();
    return orJoin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AndJoin createAndJoin()
  {
    AndJoinImpl andJoin = new AndJoinImpl();
    return andJoin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaitingPlace createWaitingPlace()
  {
    WaitingPlaceImpl waitingPlace = new WaitingPlaceImpl();
    return waitingPlace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Timer createTimer()
  {
    TimerImpl timer = new TimerImpl();
    return timer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connect createConnect()
  {
    ConnectImpl connect = new ConnectImpl();
    return connect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConnectElement createConnectElement()
  {
    ConnectElementImpl connectElement = new ConnectElementImpl();
    return connectElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FailurePoint createFailurePoint()
  {
    FailurePointImpl failurePoint = new FailurePointImpl();
    return failurePoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndPoint createEndPoint()
  {
    EndPointImpl endPoint = new EndPointImpl();
    return endPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrFork createOrFork()
  {
    OrForkImpl orFork = new OrForkImpl();
    return orFork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrBody createOrBody()
  {
    OrBodyImpl orBody = new OrBodyImpl();
    return orBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularOrFork createRegularOrFork()
  {
    RegularOrForkImpl regularOrFork = new RegularOrForkImpl();
    return regularOrFork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AndFork createAndFork()
  {
    AndForkImpl andFork = new AndForkImpl();
    return andFork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stub createStub()
  {
    StubImpl stub = new StubImpl();
    return stub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubParameters createStubParameters()
  {
    StubParametersImpl stubParameters = new StubParametersImpl();
    return stubParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubDeclaration createStubDeclaration()
  {
    StubDeclarationImpl stubDeclaration = new StubDeclarationImpl();
    return stubDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StubOutPath createStubOutPath()
  {
    StubOutPathImpl stubOutPath = new StubOutPathImpl();
    return stubOutPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PluginBinding createPluginBinding()
  {
    PluginBindingImpl pluginBinding = new PluginBindingImpl();
    return pluginBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentRef createComponentRef()
  {
    ComponentRefImpl componentRef = new ComponentRefImpl();
    return componentRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoundOption createBoundOption()
  {
    BoundOptionImpl boundOption = new BoundOptionImpl();
    return boundOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoundElement createBoundElement()
  {
    BoundElementImpl boundElement = new BoundElementImpl();
    return boundElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferencedBoundElement createReferencedBoundElement()
  {
    ReferencedBoundElementImpl referencedBoundElement = new ReferencedBoundElementImpl();
    return referencedBoundElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongBoundElement createLongBoundElement()
  {
    LongBoundElementImpl longBoundElement = new LongBoundElementImpl();
    return longBoundElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Binding createBinding()
  {
    BindingImpl binding = new BindingImpl();
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InBinding createInBinding()
  {
    InBindingImpl inBinding = new InBindingImpl();
    return inBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutBinding createOutBinding()
  {
    OutBindingImpl outBinding = new OutBindingImpl();
    return outBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentBinding createComponentBinding()
  {
    ComponentBindingImpl componentBinding = new ComponentBindingImpl();
    return componentBinding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FailureLabel createFailureLabel()
  {
    FailureLabelImpl failureLabel = new FailureLabelImpl();
    return failureLabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBodyNodes createPathBodyNodes()
  {
    PathBodyNodesImpl pathBodyNodes = new PathBodyNodesImpl();
    return pathBodyNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualitativeLabel createQualitativeLabelFromString(EDataType eDataType, String initialValue)
  {
    QualitativeLabel result = QualitativeLabel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertQualitativeLabelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntentionalElementType createIntentionalElementTypeFromString(EDataType eDataType, String initialValue)
  {
    IntentionalElementType result = IntentionalElementType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntentionalElementTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContributionType createContributionTypeFromString(EDataType eDataType, String initialValue)
  {
    ContributionType result = ContributionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertContributionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportanceType createImportanceTypeFromString(EDataType eDataType, String initialValue)
  {
    ImportanceType result = ImportanceType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImportanceTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecompositionType createDecompositionTypeFromString(EDataType eDataType, String initialValue)
  {
    DecompositionType result = DecompositionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDecompositionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WAITKIND createWAITKINDFromString(EDataType eDataType, String initialValue)
  {
    WAITKIND result = WAITKIND.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertWAITKINDToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COMPONENTKIND createCOMPONENTKINDFromString(EDataType eDataType, String initialValue)
  {
    COMPONENTKIND result = COMPONENTKIND.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCOMPONENTKINDToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TurnPackage getTurnPackage()
  {
    return (TurnPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TurnPackage getPackage()
  {
    return TurnPackage.eINSTANCE;
  }

} //TurnFactoryImpl
