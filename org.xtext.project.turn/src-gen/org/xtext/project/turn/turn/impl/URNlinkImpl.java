/**
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.turn.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.project.turn.turn.LongName;
import org.xtext.project.turn.turn.Text;
import org.xtext.project.turn.turn.TurnPackage;
import org.xtext.project.turn.turn.URNlink;
import org.xtext.project.turn.turn.URNmodelElement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>UR Nlink</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.project.turn.turn.impl.URNlinkImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.URNlinkImpl#getLongName <em>Long Name</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.URNlinkImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.URNlinkImpl#getFromElem <em>From Elem</em>}</li>
 *   <li>{@link org.xtext.project.turn.turn.impl.URNlinkImpl#getToElem <em>To Elem</em>}</li>
 * </ul>
 *
 * @generated
 */
public class URNlinkImpl extends URNmodelElementImpl implements URNlink
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLongName() <em>Long Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLongName()
   * @generated
   * @ordered
   */
  protected LongName longName;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Text type;

  /**
   * The cached value of the '{@link #getFromElem() <em>From Elem</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromElem()
   * @generated
   * @ordered
   */
  protected URNmodelElement fromElem;

  /**
   * The cached value of the '{@link #getToElem() <em>To Elem</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToElem()
   * @generated
   * @ordered
   */
  protected URNmodelElement toElem;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected URNlinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TurnPackage.Literals.UR_NLINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LongName getLongName()
  {
    return longName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLongName(LongName newLongName, NotificationChain msgs)
  {
    LongName oldLongName = longName;
    longName = newLongName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__LONG_NAME, oldLongName, newLongName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLongName(LongName newLongName)
  {
    if (newLongName != longName)
    {
      NotificationChain msgs = null;
      if (longName != null)
        msgs = ((InternalEObject)longName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.UR_NLINK__LONG_NAME, null, msgs);
      if (newLongName != null)
        msgs = ((InternalEObject)newLongName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.UR_NLINK__LONG_NAME, null, msgs);
      msgs = basicSetLongName(newLongName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__LONG_NAME, newLongName, newLongName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Text getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(Text newType, NotificationChain msgs)
  {
    Text oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(Text newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TurnPackage.UR_NLINK__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TurnPackage.UR_NLINK__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNmodelElement getFromElem()
  {
    if (fromElem != null && fromElem.eIsProxy())
    {
      InternalEObject oldFromElem = (InternalEObject)fromElem;
      fromElem = (URNmodelElement)eResolveProxy(oldFromElem);
      if (fromElem != oldFromElem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TurnPackage.UR_NLINK__FROM_ELEM, oldFromElem, fromElem));
      }
    }
    return fromElem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNmodelElement basicGetFromElem()
  {
    return fromElem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromElem(URNmodelElement newFromElem)
  {
    URNmodelElement oldFromElem = fromElem;
    fromElem = newFromElem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__FROM_ELEM, oldFromElem, fromElem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNmodelElement getToElem()
  {
    if (toElem != null && toElem.eIsProxy())
    {
      InternalEObject oldToElem = (InternalEObject)toElem;
      toElem = (URNmodelElement)eResolveProxy(oldToElem);
      if (toElem != oldToElem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TurnPackage.UR_NLINK__TO_ELEM, oldToElem, toElem));
      }
    }
    return toElem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public URNmodelElement basicGetToElem()
  {
    return toElem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToElem(URNmodelElement newToElem)
  {
    URNmodelElement oldToElem = toElem;
    toElem = newToElem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TurnPackage.UR_NLINK__TO_ELEM, oldToElem, toElem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TurnPackage.UR_NLINK__LONG_NAME:
        return basicSetLongName(null, msgs);
      case TurnPackage.UR_NLINK__TYPE:
        return basicSetType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TurnPackage.UR_NLINK__NAME:
        return getName();
      case TurnPackage.UR_NLINK__LONG_NAME:
        return getLongName();
      case TurnPackage.UR_NLINK__TYPE:
        return getType();
      case TurnPackage.UR_NLINK__FROM_ELEM:
        if (resolve) return getFromElem();
        return basicGetFromElem();
      case TurnPackage.UR_NLINK__TO_ELEM:
        if (resolve) return getToElem();
        return basicGetToElem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TurnPackage.UR_NLINK__NAME:
        setName((String)newValue);
        return;
      case TurnPackage.UR_NLINK__LONG_NAME:
        setLongName((LongName)newValue);
        return;
      case TurnPackage.UR_NLINK__TYPE:
        setType((Text)newValue);
        return;
      case TurnPackage.UR_NLINK__FROM_ELEM:
        setFromElem((URNmodelElement)newValue);
        return;
      case TurnPackage.UR_NLINK__TO_ELEM:
        setToElem((URNmodelElement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.UR_NLINK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TurnPackage.UR_NLINK__LONG_NAME:
        setLongName((LongName)null);
        return;
      case TurnPackage.UR_NLINK__TYPE:
        setType((Text)null);
        return;
      case TurnPackage.UR_NLINK__FROM_ELEM:
        setFromElem((URNmodelElement)null);
        return;
      case TurnPackage.UR_NLINK__TO_ELEM:
        setToElem((URNmodelElement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TurnPackage.UR_NLINK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TurnPackage.UR_NLINK__LONG_NAME:
        return longName != null;
      case TurnPackage.UR_NLINK__TYPE:
        return type != null;
      case TurnPackage.UR_NLINK__FROM_ELEM:
        return fromElem != null;
      case TurnPackage.UR_NLINK__TO_ELEM:
        return toElem != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //URNlinkImpl
