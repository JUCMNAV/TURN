/*
 * generated by Xtext 2.12.0
 */
package org.xtext.project.turn.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class TurnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class URNspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.URNspec");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cUrnModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cInfoAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInfoConcreteURNspecParserRuleCall_0_2_0 = (RuleCall)cInfoAssignment_0_2.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		private final Assignment cShowAsMeansEndAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final Keyword cShowAsMeansEndShowAsMeansEndKeyword_2_0 = (Keyword)cShowAsMeansEndAssignment_2.eContents().get(0);
		private final Assignment cStratGroupsAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cStratGroupsStrategiesGroupParserRuleCall_3_0 = (RuleCall)cStratGroupsAssignment_3.eContents().get(0);
		private final Assignment cStrategiesAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cStrategiesEvaluationStrategyParserRuleCall_4_0 = (RuleCall)cStrategiesAssignment_4.eContents().get(0);
		private final Assignment cIndConversionsAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cIndConversionsIndicatorConversionParserRuleCall_5_0 = (RuleCall)cIndConversionsAssignment_5.eContents().get(0);
		private final Assignment cContribContextGroupsAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cContribContextGroupsContributionContextGroupParserRuleCall_6_0 = (RuleCall)cContribContextGroupsAssignment_6.eContents().get(0);
		private final Assignment cContribContextsAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cContribContextsContributionContextParserRuleCall_7_0 = (RuleCall)cContribContextsAssignment_7.eContents().get(0);
		private final Assignment cUcmMapsAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cUcmMapsUCMmapParserRuleCall_8_0 = (RuleCall)cUcmMapsAssignment_8.eContents().get(0);
		private final Assignment cConcernsAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cConcernsConcernParserRuleCall_9_0 = (RuleCall)cConcernsAssignment_9.eContents().get(0);
		private final Assignment cUrnlinksAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cUrnlinksURNlinkParserRuleCall_10_0 = (RuleCall)cUrnlinksAssignment_10.eContents().get(0);
		private final Assignment cMetadataAssignment_11 = (Assignment)cUnorderedGroup.eContents().get(11);
		private final RuleCall cMetadataMetadataParserRuleCall_11_0 = (RuleCall)cMetadataAssignment_11.eContents().get(0);
		
		//URNspec:
		//	'urnModel' name=QualifiedName
		//	info=ConcreteURNspec? & actors+=Actor* & showAsMeansEnd?='showAsMeansEnd'? & stratGroups+=StrategiesGroup* &
		//	strategies+=EvaluationStrategy* & indConversions+=IndicatorConversion* &
		//	contribContextGroups+=ContributionContextGroup* & contribContexts+=ContributionContext* & ucmMaps+=UCMmap* &
		//	concerns+=Concern* & urnlinks+=URNlink* & metadata+=Metadata*;
		@Override public ParserRule getRule() { return rule; }
		
		//'urnModel' name=QualifiedName info=ConcreteURNspec? & actors+=Actor* & showAsMeansEnd?='showAsMeansEnd'? &
		//stratGroups+=StrategiesGroup* & strategies+=EvaluationStrategy* & indConversions+=IndicatorConversion* &
		//contribContextGroups+=ContributionContextGroup* & contribContexts+=ContributionContext* & ucmMaps+=UCMmap* &
		//concerns+=Concern* & urnlinks+=URNlink* & metadata+=Metadata*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'urnModel' name=QualifiedName info=ConcreteURNspec?
		public Group getGroup_0() { return cGroup_0; }
		
		//'urnModel'
		public Keyword getUrnModelKeyword_0_0() { return cUrnModelKeyword_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//info=ConcreteURNspec?
		public Assignment getInfoAssignment_0_2() { return cInfoAssignment_0_2; }
		
		//ConcreteURNspec
		public RuleCall getInfoConcreteURNspecParserRuleCall_0_2_0() { return cInfoConcreteURNspecParserRuleCall_0_2_0; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_1_0() { return cActorsActorParserRuleCall_1_0; }
		
		//showAsMeansEnd?='showAsMeansEnd'?
		public Assignment getShowAsMeansEndAssignment_2() { return cShowAsMeansEndAssignment_2; }
		
		//'showAsMeansEnd'
		public Keyword getShowAsMeansEndShowAsMeansEndKeyword_2_0() { return cShowAsMeansEndShowAsMeansEndKeyword_2_0; }
		
		//stratGroups+=StrategiesGroup*
		public Assignment getStratGroupsAssignment_3() { return cStratGroupsAssignment_3; }
		
		//StrategiesGroup
		public RuleCall getStratGroupsStrategiesGroupParserRuleCall_3_0() { return cStratGroupsStrategiesGroupParserRuleCall_3_0; }
		
		//strategies+=EvaluationStrategy*
		public Assignment getStrategiesAssignment_4() { return cStrategiesAssignment_4; }
		
		//EvaluationStrategy
		public RuleCall getStrategiesEvaluationStrategyParserRuleCall_4_0() { return cStrategiesEvaluationStrategyParserRuleCall_4_0; }
		
		//indConversions+=IndicatorConversion*
		public Assignment getIndConversionsAssignment_5() { return cIndConversionsAssignment_5; }
		
		//IndicatorConversion
		public RuleCall getIndConversionsIndicatorConversionParserRuleCall_5_0() { return cIndConversionsIndicatorConversionParserRuleCall_5_0; }
		
		//contribContextGroups+=ContributionContextGroup*
		public Assignment getContribContextGroupsAssignment_6() { return cContribContextGroupsAssignment_6; }
		
		//ContributionContextGroup
		public RuleCall getContribContextGroupsContributionContextGroupParserRuleCall_6_0() { return cContribContextGroupsContributionContextGroupParserRuleCall_6_0; }
		
		//contribContexts+=ContributionContext*
		public Assignment getContribContextsAssignment_7() { return cContribContextsAssignment_7; }
		
		//ContributionContext
		public RuleCall getContribContextsContributionContextParserRuleCall_7_0() { return cContribContextsContributionContextParserRuleCall_7_0; }
		
		//ucmMaps+=UCMmap*
		public Assignment getUcmMapsAssignment_8() { return cUcmMapsAssignment_8; }
		
		//UCMmap
		public RuleCall getUcmMapsUCMmapParserRuleCall_8_0() { return cUcmMapsUCMmapParserRuleCall_8_0; }
		
		//concerns+=Concern*
		public Assignment getConcernsAssignment_9() { return cConcernsAssignment_9; }
		
		//Concern
		public RuleCall getConcernsConcernParserRuleCall_9_0() { return cConcernsConcernParserRuleCall_9_0; }
		
		//urnlinks+=URNlink*
		public Assignment getUrnlinksAssignment_10() { return cUrnlinksAssignment_10; }
		
		//URNlink
		public RuleCall getUrnlinksURNlinkParserRuleCall_10_0() { return cUrnlinksURNlinkParserRuleCall_10_0; }
		
		//metadata+=Metadata*
		public Assignment getMetadataAssignment_11() { return cMetadataAssignment_11; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_11_0() { return cMetadataMetadataParserRuleCall_11_0; }
	}
	public class ConcreteURNspecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ConcreteURNspec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDescriptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cAuthorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAuthorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAuthorSTRINGTerminalRuleCall_4_0 = (RuleCall)cAuthorAssignment_4.eContents().get(0);
		private final Keyword cCreatedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCreatedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCreatedSTRINGTerminalRuleCall_6_0 = (RuleCall)cCreatedAssignment_6.eContents().get(0);
		private final Keyword cModifiedKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModifiedAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModifiedSTRINGTerminalRuleCall_8_0 = (RuleCall)cModifiedAssignment_8.eContents().get(0);
		private final Keyword cVersionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSpecVersionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSpecVersionSTRINGTerminalRuleCall_10_0 = (RuleCall)cSpecVersionAssignment_10.eContents().get(0);
		private final Keyword cUrnVersionKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cUrnVersionAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUrnVersionSTRINGTerminalRuleCall_12_0 = (RuleCall)cUrnVersionAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//ConcreteURNspec:
		//	'{'
		//	'description' description=STRING
		//	'author' author=STRING
		//	'created' created=STRING
		//	'modified' modified=STRING
		//	'version' specVersion=STRING
		//	'urnVersion' urnVersion=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'description' description=STRING 'author' author=STRING 'created' created=STRING 'modified' modified=STRING
		//'version' specVersion=STRING 'urnVersion' urnVersion=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_1() { return cDescriptionKeyword_1; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'author'
		public Keyword getAuthorKeyword_3() { return cAuthorKeyword_3; }
		
		//author=STRING
		public Assignment getAuthorAssignment_4() { return cAuthorAssignment_4; }
		
		//STRING
		public RuleCall getAuthorSTRINGTerminalRuleCall_4_0() { return cAuthorSTRINGTerminalRuleCall_4_0; }
		
		//'created'
		public Keyword getCreatedKeyword_5() { return cCreatedKeyword_5; }
		
		//created=STRING
		public Assignment getCreatedAssignment_6() { return cCreatedAssignment_6; }
		
		//STRING
		public RuleCall getCreatedSTRINGTerminalRuleCall_6_0() { return cCreatedSTRINGTerminalRuleCall_6_0; }
		
		//'modified'
		public Keyword getModifiedKeyword_7() { return cModifiedKeyword_7; }
		
		//modified=STRING
		public Assignment getModifiedAssignment_8() { return cModifiedAssignment_8; }
		
		//STRING
		public RuleCall getModifiedSTRINGTerminalRuleCall_8_0() { return cModifiedSTRINGTerminalRuleCall_8_0; }
		
		//'version'
		public Keyword getVersionKeyword_9() { return cVersionKeyword_9; }
		
		//specVersion=STRING
		public Assignment getSpecVersionAssignment_10() { return cSpecVersionAssignment_10; }
		
		//STRING
		public RuleCall getSpecVersionSTRINGTerminalRuleCall_10_0() { return cSpecVersionSTRINGTerminalRuleCall_10_0; }
		
		//'urnVersion'
		public Keyword getUrnVersionKeyword_11() { return cUrnVersionKeyword_11; }
		
		//urnVersion=STRING
		public Assignment getUrnVersionAssignment_12() { return cUrnVersionAssignment_12; }
		
		//STRING
		public RuleCall getUrnVersionSTRINGTerminalRuleCall_12_0() { return cUrnVersionSTRINGTerminalRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class ConcernElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Concern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcernKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Assignment cElementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cElementURNmodelElementCrossReference_5_0 = (CrossReference)cElementAssignment_5.eContents().get(0);
		private final RuleCall cElementURNmodelElementIDTerminalRuleCall_5_0_1 = (RuleCall)cElementURNmodelElementCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cElementsURNmodelElementCrossReference_6_1_0 = (CrossReference)cElementsAssignment_6_1.eContents().get(0);
		private final RuleCall cElementsURNmodelElementIDTerminalRuleCall_6_1_0_1 = (RuleCall)cElementsURNmodelElementCrossReference_6_1_0.eContents().get(1);
		
		//Concern:
		//	'concern' name=QualifiedName
		//	longName=LongName ':'
		//	condition=Condition?
		//	element=[URNmodelElement] (',' elements+=[URNmodelElement])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'concern' name=QualifiedName longName=LongName ':' condition=Condition? element=[URNmodelElement] (','
		//elements+=[URNmodelElement])*
		public Group getGroup() { return cGroup; }
		
		//'concern'
		public Keyword getConcernKeyword_0() { return cConcernKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }
		
		//element=[URNmodelElement]
		public Assignment getElementAssignment_5() { return cElementAssignment_5; }
		
		//[URNmodelElement]
		public CrossReference getElementURNmodelElementCrossReference_5_0() { return cElementURNmodelElementCrossReference_5_0; }
		
		//ID
		public RuleCall getElementURNmodelElementIDTerminalRuleCall_5_0_1() { return cElementURNmodelElementIDTerminalRuleCall_5_0_1; }
		
		//(',' elements+=[URNmodelElement])*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//elements+=[URNmodelElement]
		public Assignment getElementsAssignment_6_1() { return cElementsAssignment_6_1; }
		
		//[URNmodelElement]
		public CrossReference getElementsURNmodelElementCrossReference_6_1_0() { return cElementsURNmodelElementCrossReference_6_1_0; }
		
		//ID
		public RuleCall getElementsURNmodelElementIDTerminalRuleCall_6_1_0_1() { return cElementsURNmodelElementIDTerminalRuleCall_6_1_0_1; }
	}
	public class LongNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.LongName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLongnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLongnameAlternatives_1_1_0 = (Alternatives)cLongnameAssignment_1_1.eContents().get(0);
		private final RuleCall cLongnameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cLongnameAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cLongnameSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cLongnameAlternatives_1_1_0.eContents().get(1);
		
		//LongName:
		//	{LongName} ('#' longname=(ID | STRING))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{LongName} ('#' longname=(ID | STRING))?
		public Group getGroup() { return cGroup; }
		
		//{LongName}
		public Action getLongNameAction_0() { return cLongNameAction_0; }
		
		//('#' longname=(ID | STRING))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }
		
		//longname=(ID | STRING)
		public Assignment getLongnameAssignment_1_1() { return cLongnameAssignment_1_1; }
		
		//(ID | STRING)
		public Alternatives getLongnameAlternatives_1_1_0() { return cLongnameAlternatives_1_1_0; }
		
		//ID
		public RuleCall getLongnameIDTerminalRuleCall_1_1_0_0() { return cLongnameIDTerminalRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getLongnameSTRINGTerminalRuleCall_1_1_0_1() { return cLongnameSTRINGTerminalRuleCall_1_1_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionTextParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInfoAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInfoConcreteConditionParserRuleCall_3_1_0 = (RuleCall)cInfoAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Condition:
		//	'[' expression=Text ']' ('{' info=ConcreteCondition? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression=Text ']' ('{' info=ConcreteCondition? '}')?
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression=Text
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Text
		public RuleCall getExpressionTextParserRuleCall_1_0() { return cExpressionTextParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//('{' info=ConcreteCondition? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//info=ConcreteCondition?
		public Assignment getInfoAssignment_3_1() { return cInfoAssignment_3_1; }
		
		//ConcreteCondition
		public RuleCall getInfoConcreteConditionParserRuleCall_3_1_0() { return cInfoConcreteConditionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ConcreteConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ConcreteCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//ConcreteCondition:
		//	label=STRING
		//	description=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//label=STRING description=STRING
		public Group getGroup() { return cGroup; }
		
		//label=STRING
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_0() { return cLabelSTRINGTerminalRuleCall_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}
	public class URNlinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.URNlink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cLongNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_1_1_0 = (RuleCall)cLongNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTextParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cFromElemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromElemURNmodelElementCrossReference_3_0 = (CrossReference)cFromElemAssignment_3.eContents().get(0);
		private final RuleCall cFromElemURNmodelElementIDTerminalRuleCall_3_0_1 = (RuleCall)cFromElemURNmodelElementCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToElemAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToElemURNmodelElementCrossReference_5_0 = (CrossReference)cToElemAssignment_5.eContents().get(0);
		private final RuleCall cToElemURNmodelElementIDTerminalRuleCall_5_0_1 = (RuleCall)cToElemURNmodelElementCrossReference_5_0.eContents().get(1);
		
		//URNlink:
		//	'link' (name=QualifiedName longName=LongName ':')? ('type' type=Text)?
		//	fromElem=[URNmodelElement] '-->'
		//	toElem=[URNmodelElement];
		@Override public ParserRule getRule() { return rule; }
		
		//'link' (name=QualifiedName longName=LongName ':')? ('type' type=Text)? fromElem=[URNmodelElement] '-->'
		//toElem=[URNmodelElement]
		public Group getGroup() { return cGroup; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//(name=QualifiedName longName=LongName ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_0() { return cNameQualifiedNameParserRuleCall_1_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1_1() { return cLongNameAssignment_1_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_1_0() { return cLongNameLongNameParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//('type' type=Text)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'type'
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }
		
		//type=Text
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Text
		public RuleCall getTypeTextParserRuleCall_2_1_0() { return cTypeTextParserRuleCall_2_1_0; }
		
		//fromElem=[URNmodelElement]
		public Assignment getFromElemAssignment_3() { return cFromElemAssignment_3; }
		
		//[URNmodelElement]
		public CrossReference getFromElemURNmodelElementCrossReference_3_0() { return cFromElemURNmodelElementCrossReference_3_0; }
		
		//ID
		public RuleCall getFromElemURNmodelElementIDTerminalRuleCall_3_0_1() { return cFromElemURNmodelElementIDTerminalRuleCall_3_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_4; }
		
		//toElem=[URNmodelElement]
		public Assignment getToElemAssignment_5() { return cToElemAssignment_5; }
		
		//[URNmodelElement]
		public CrossReference getToElemURNmodelElementCrossReference_5_0() { return cToElemURNmodelElementCrossReference_5_0; }
		
		//ID
		public RuleCall getToElemURNmodelElementIDTerminalRuleCall_5_0_1() { return cToElemURNmodelElementIDTerminalRuleCall_5_0_1; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetadataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElemAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cElemURNmodelElementCrossReference_1_0_0 = (CrossReference)cElemAssignment_1_0.eContents().get(0);
		private final RuleCall cElemURNmodelElementQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cElemURNmodelElementCrossReference_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTextParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Metadata:
		//	'metadata' (elem=[URNmodelElement|QualifiedName] ':')?
		//	name=ID '=' value=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//'metadata' (elem=[URNmodelElement|QualifiedName] ':')? name=ID '=' value=Text
		public Group getGroup() { return cGroup; }
		
		//'metadata'
		public Keyword getMetadataKeyword_0() { return cMetadataKeyword_0; }
		
		//(elem=[URNmodelElement|QualifiedName] ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//elem=[URNmodelElement|QualifiedName]
		public Assignment getElemAssignment_1_0() { return cElemAssignment_1_0; }
		
		//[URNmodelElement|QualifiedName]
		public CrossReference getElemURNmodelElementCrossReference_1_0_0() { return cElemURNmodelElementCrossReference_1_0_0; }
		
		//QualifiedName
		public RuleCall getElemURNmodelElementQualifiedNameParserRuleCall_1_0_0_1() { return cElemURNmodelElementQualifiedNameParserRuleCall_1_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Text
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Text
		public RuleCall getValueTextParserRuleCall_4_0() { return cValueTextParserRuleCall_4_0; }
	}
	public class URNmodelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.URNmodelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArtificialRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartPointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStrategiesGroupParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContributionContextGroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cURNlinkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConcernParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cActorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIntentionalElementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContributionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDecompositionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDependencyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cEvaluationStrategyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLinearConversionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cQualToQMappingsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cContributionContextParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cUCMmapParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRespRefParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cWaitingPlaceParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cFailurePointParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cStubParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cOrForkParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cOrJoinParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cAndForkParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cAndJoinParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cTimerParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cComponentRefParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		
		//URNmodelElement:
		//	ArtificialRule | StartPoint | StrategiesGroup | ContributionContextGroup | URNlink | Concern | Actor |
		//	IntentionalElement | Contribution | Decomposition | Dependency | EvaluationStrategy | LinearConversion |
		//	QualToQMappings | ContributionContext | UCMmap | RespRef | WaitingPlace | FailurePoint | Stub | OrFork | OrJoin |
		//	AndFork | AndJoin | Timer | ComponentRef;
		@Override public ParserRule getRule() { return rule; }
		
		//ArtificialRule | StartPoint | StrategiesGroup | ContributionContextGroup | URNlink | Concern | Actor |
		//IntentionalElement | Contribution | Decomposition | Dependency | EvaluationStrategy | LinearConversion |
		//QualToQMappings | ContributionContext | UCMmap | RespRef | WaitingPlace | FailurePoint | Stub | OrFork | OrJoin |
		//AndFork | AndJoin | Timer | ComponentRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArtificialRule
		public RuleCall getArtificialRuleParserRuleCall_0() { return cArtificialRuleParserRuleCall_0; }
		
		//StartPoint
		public RuleCall getStartPointParserRuleCall_1() { return cStartPointParserRuleCall_1; }
		
		//StrategiesGroup
		public RuleCall getStrategiesGroupParserRuleCall_2() { return cStrategiesGroupParserRuleCall_2; }
		
		//ContributionContextGroup
		public RuleCall getContributionContextGroupParserRuleCall_3() { return cContributionContextGroupParserRuleCall_3; }
		
		//URNlink
		public RuleCall getURNlinkParserRuleCall_4() { return cURNlinkParserRuleCall_4; }
		
		//Concern
		public RuleCall getConcernParserRuleCall_5() { return cConcernParserRuleCall_5; }
		
		//Actor
		public RuleCall getActorParserRuleCall_6() { return cActorParserRuleCall_6; }
		
		//IntentionalElement
		public RuleCall getIntentionalElementParserRuleCall_7() { return cIntentionalElementParserRuleCall_7; }
		
		//Contribution
		public RuleCall getContributionParserRuleCall_8() { return cContributionParserRuleCall_8; }
		
		//Decomposition
		public RuleCall getDecompositionParserRuleCall_9() { return cDecompositionParserRuleCall_9; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_10() { return cDependencyParserRuleCall_10; }
		
		//EvaluationStrategy
		public RuleCall getEvaluationStrategyParserRuleCall_11() { return cEvaluationStrategyParserRuleCall_11; }
		
		//LinearConversion
		public RuleCall getLinearConversionParserRuleCall_12() { return cLinearConversionParserRuleCall_12; }
		
		//QualToQMappings
		public RuleCall getQualToQMappingsParserRuleCall_13() { return cQualToQMappingsParserRuleCall_13; }
		
		//ContributionContext
		public RuleCall getContributionContextParserRuleCall_14() { return cContributionContextParserRuleCall_14; }
		
		//UCMmap
		public RuleCall getUCMmapParserRuleCall_15() { return cUCMmapParserRuleCall_15; }
		
		//RespRef
		public RuleCall getRespRefParserRuleCall_16() { return cRespRefParserRuleCall_16; }
		
		//WaitingPlace
		public RuleCall getWaitingPlaceParserRuleCall_17() { return cWaitingPlaceParserRuleCall_17; }
		
		//FailurePoint
		public RuleCall getFailurePointParserRuleCall_18() { return cFailurePointParserRuleCall_18; }
		
		//Stub
		public RuleCall getStubParserRuleCall_19() { return cStubParserRuleCall_19; }
		
		//OrFork
		public RuleCall getOrForkParserRuleCall_20() { return cOrForkParserRuleCall_20; }
		
		//OrJoin
		public RuleCall getOrJoinParserRuleCall_21() { return cOrJoinParserRuleCall_21; }
		
		//AndFork
		public RuleCall getAndForkParserRuleCall_22() { return cAndForkParserRuleCall_22; }
		
		//AndJoin
		public RuleCall getAndJoinParserRuleCall_23() { return cAndJoinParserRuleCall_23; }
		
		//Timer
		public RuleCall getTimerParserRuleCall_24() { return cTimerParserRuleCall_24; }
		
		//ComponentRef
		public RuleCall getComponentRefParserRuleCall_25() { return cComponentRefParserRuleCall_25; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportanceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cImportanceAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_4_1_0_0 = (RuleCall)cImportanceAssignment_4_1_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0 = (RuleCall)cImportanceQuantitativeAssignment_4_1_1.eContents().get(0);
		private final Assignment cElemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElemsIntentionalElementParserRuleCall_5_0 = (RuleCall)cElemsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Actor:
		//	'actor' name=QualifiedName
		//	longName=LongName '{' ('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))?
		//	elems+=IntentionalElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=QualifiedName longName=LongName '{' ('importance' (importance=ImportanceType |
		//importanceQuantitative=QuantitativeValue))? elems+=IntentionalElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'importance'
		public Keyword getImportanceKeyword_4_0() { return cImportanceKeyword_4_0; }
		
		//importance=ImportanceType | importanceQuantitative=QuantitativeValue
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//importance=ImportanceType
		public Assignment getImportanceAssignment_4_1_0() { return cImportanceAssignment_4_1_0; }
		
		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_4_1_0_0() { return cImportanceImportanceTypeEnumRuleCall_4_1_0_0; }
		
		//importanceQuantitative=QuantitativeValue
		public Assignment getImportanceQuantitativeAssignment_4_1_1() { return cImportanceQuantitativeAssignment_4_1_1; }
		
		//QuantitativeValue
		public RuleCall getImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0() { return cImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0; }
		
		//elems+=IntentionalElement*
		public Assignment getElemsAssignment_5() { return cElemsAssignment_5; }
		
		//IntentionalElement
		public RuleCall getElemsIntentionalElementParserRuleCall_5_0() { return cElemsIntentionalElementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.IntentionalElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIntentionalElementTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportanceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cImportanceAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_4_1_0_0 = (RuleCall)cImportanceAssignment_4_1_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0 = (RuleCall)cImportanceQuantitativeAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cUnitAssignment_5_1.eContents().get(0);
		private final Assignment cLinksSrcAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLinksSrcElementLinkParserRuleCall_6_0 = (RuleCall)cLinksSrcAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IntentionalElement:
		//	type=IntentionalElementType name=QualifiedName
		//	longName=LongName '{' ('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))? ('unit'
		//	unit=STRING)?
		//	linksSrc+=ElementLink*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//type=IntentionalElementType name=QualifiedName longName=LongName '{' ('importance' (importance=ImportanceType |
		//importanceQuantitative=QuantitativeValue))? ('unit' unit=STRING)? linksSrc+=ElementLink* '}'
		public Group getGroup() { return cGroup; }
		
		//type=IntentionalElementType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//IntentionalElementType
		public RuleCall getTypeIntentionalElementTypeEnumRuleCall_0_0() { return cTypeIntentionalElementTypeEnumRuleCall_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'importance'
		public Keyword getImportanceKeyword_4_0() { return cImportanceKeyword_4_0; }
		
		//importance=ImportanceType | importanceQuantitative=QuantitativeValue
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//importance=ImportanceType
		public Assignment getImportanceAssignment_4_1_0() { return cImportanceAssignment_4_1_0; }
		
		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_4_1_0_0() { return cImportanceImportanceTypeEnumRuleCall_4_1_0_0; }
		
		//importanceQuantitative=QuantitativeValue
		public Assignment getImportanceQuantitativeAssignment_4_1_1() { return cImportanceQuantitativeAssignment_4_1_1; }
		
		//QuantitativeValue
		public RuleCall getImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0() { return cImportanceQuantitativeQuantitativeValueParserRuleCall_4_1_1_0; }
		
		//('unit' unit=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'unit'
		public Keyword getUnitKeyword_5_0() { return cUnitKeyword_5_0; }
		
		//unit=STRING
		public Assignment getUnitAssignment_5_1() { return cUnitAssignment_5_1; }
		
		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_5_1_0() { return cUnitSTRINGTerminalRuleCall_5_1_0; }
		
		//linksSrc+=ElementLink*
		public Assignment getLinksSrcAssignment_6() { return cLinksSrcAssignment_6; }
		
		//ElementLink
		public RuleCall getLinksSrcElementLinkParserRuleCall_6_0() { return cLinksSrcElementLinkParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ElementLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ElementLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContributionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecompositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementLink:
		//	Contribution | Decomposition | Dependency;
		@Override public ParserRule getRule() { return rule; }
		
		//Contribution | Decomposition | Dependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contribution
		public RuleCall getContributionParserRuleCall_0() { return cContributionParserRuleCall_0; }
		
		//Decomposition
		public RuleCall getDecompositionParserRuleCall_1() { return cDecompositionParserRuleCall_1; }
		
		//Dependency
		public RuleCall getDependencyParserRuleCall_2() { return cDependencyParserRuleCall_2; }
	}
	public class ContributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Contribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cLongNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_0_1_0 = (RuleCall)cLongNameAssignment_0_1.eContents().get(0);
		private final Keyword cContributesToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestIntentionalElementCrossReference_2_0 = (CrossReference)cDestAssignment_2.eContents().get(0);
		private final RuleCall cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDestIntentionalElementCrossReference_2_0.eContents().get(1);
		private final Assignment cCorrelationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cCorrelationCorrelatedKeyword_3_0 = (Keyword)cCorrelationAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cContributionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cContributionContributionTypeEnumRuleCall_5_0_0 = (RuleCall)cContributionAssignment_5_0.eContents().get(0);
		private final Assignment cQuantitativeContributionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cQuantitativeContributionQuantitativeValueParserRuleCall_5_1_0 = (RuleCall)cQuantitativeContributionAssignment_5_1.eContents().get(0);
		
		//Contribution:
		//	(name=QualifiedName longName=LongName)?
		//	'contributesTo' dest=[IntentionalElement|QualifiedName] correlation?='correlated'? 'with'
		//	(contribution=ContributionType | quantitativeContribution=QuantitativeValue);
		@Override public ParserRule getRule() { return rule; }
		
		//(name=QualifiedName longName=LongName)? 'contributesTo' dest=[IntentionalElement|QualifiedName]
		//correlation?='correlated'? 'with' (contribution=ContributionType | quantitativeContribution=QuantitativeValue)
		public Group getGroup() { return cGroup; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0_0() { return cNameQualifiedNameParserRuleCall_0_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_0_1() { return cLongNameAssignment_0_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_0_1_0() { return cLongNameLongNameParserRuleCall_0_1_0; }
		
		//'contributesTo'
		public Keyword getContributesToKeyword_1() { return cContributesToKeyword_1; }
		
		//dest=[IntentionalElement|QualifiedName]
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getDestIntentionalElementCrossReference_2_0() { return cDestIntentionalElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDestIntentionalElementQualifiedNameParserRuleCall_2_0_1() { return cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1; }
		
		//correlation?='correlated'?
		public Assignment getCorrelationAssignment_3() { return cCorrelationAssignment_3; }
		
		//'correlated'
		public Keyword getCorrelationCorrelatedKeyword_3_0() { return cCorrelationCorrelatedKeyword_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//contribution=ContributionType | quantitativeContribution=QuantitativeValue
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//contribution=ContributionType
		public Assignment getContributionAssignment_5_0() { return cContributionAssignment_5_0; }
		
		//ContributionType
		public RuleCall getContributionContributionTypeEnumRuleCall_5_0_0() { return cContributionContributionTypeEnumRuleCall_5_0_0; }
		
		//quantitativeContribution=QuantitativeValue
		public Assignment getQuantitativeContributionAssignment_5_1() { return cQuantitativeContributionAssignment_5_1; }
		
		//QuantitativeValue
		public RuleCall getQuantitativeContributionQuantitativeValueParserRuleCall_5_1_0() { return cQuantitativeContributionQuantitativeValueParserRuleCall_5_1_0; }
	}
	public class DecompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Decomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cLongNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_0_1_0 = (RuleCall)cLongNameAssignment_0_1.eContents().get(0);
		private final Assignment cDecompositionTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_1_0 = (RuleCall)cDecompositionTypeAssignment_1.eContents().get(0);
		private final Keyword cDecomposesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDestIntentionalElementCrossReference_3_0 = (CrossReference)cDestAssignment_3.eContents().get(0);
		private final RuleCall cDestIntentionalElementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDestIntentionalElementCrossReference_3_0.eContents().get(1);
		
		//Decomposition:
		//	(name=QualifiedName longName=LongName)?
		//	decompositionType=DecompositionType 'decomposes' dest=[IntentionalElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(name=QualifiedName longName=LongName)? decompositionType=DecompositionType 'decomposes'
		//dest=[IntentionalElement|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0_0() { return cNameQualifiedNameParserRuleCall_0_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_0_1() { return cLongNameAssignment_0_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_0_1_0() { return cLongNameLongNameParserRuleCall_0_1_0; }
		
		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_1() { return cDecompositionTypeAssignment_1; }
		
		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_1_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_1_0; }
		
		//'decomposes'
		public Keyword getDecomposesKeyword_2() { return cDecomposesKeyword_2; }
		
		//dest=[IntentionalElement|QualifiedName]
		public Assignment getDestAssignment_3() { return cDestAssignment_3; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getDestIntentionalElementCrossReference_3_0() { return cDestIntentionalElementCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getDestIntentionalElementQualifiedNameParserRuleCall_3_0_1() { return cDestIntentionalElementQualifiedNameParserRuleCall_3_0_1; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cLongNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_0_1_0 = (RuleCall)cLongNameAssignment_0_1.eContents().get(0);
		private final Keyword cDependsOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestIntentionalElementCrossReference_2_0 = (CrossReference)cDestAssignment_2.eContents().get(0);
		private final RuleCall cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDestIntentionalElementCrossReference_2_0.eContents().get(1);
		
		//Dependency:
		//	(name=QualifiedName longName=LongName)?
		//	'dependsOn' dest=[IntentionalElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(name=QualifiedName longName=LongName)? 'dependsOn' dest=[IntentionalElement|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0_0() { return cNameQualifiedNameParserRuleCall_0_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_0_1() { return cLongNameAssignment_0_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_0_1_0() { return cLongNameLongNameParserRuleCall_0_1_0; }
		
		//'dependsOn'
		public Keyword getDependsOnKeyword_1() { return cDependsOnKeyword_1; }
		
		//dest=[IntentionalElement|QualifiedName]
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getDestIntentionalElementCrossReference_2_0() { return cDestIntentionalElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDestIntentionalElementQualifiedNameParserRuleCall_2_0_1() { return cDestIntentionalElementQualifiedNameParserRuleCall_2_0_1; }
	}
	public class ArtificialRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ArtificialRule");
		private final Assignment cLongNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLongNameSTRINGTerminalRuleCall_0 = (RuleCall)cLongNameAssignment.eContents().get(0);
		
		//ArtificialRule:
		//	longName=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//longName=STRING?
		public Assignment getLongNameAssignment() { return cLongNameAssignment; }
		
		//STRING
		public RuleCall getLongNameSTRINGTerminalRuleCall_0() { return cLongNameSTRINGTerminalRuleCall_0; }
	}
	public class StrategiesGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StrategiesGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategiesGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEvalStrategyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEvalStrategyEvaluationStrategyCrossReference_4_0 = (CrossReference)cEvalStrategyAssignment_4.eContents().get(0);
		private final RuleCall cEvalStrategyEvaluationStrategyIDTerminalRuleCall_4_0_1 = (RuleCall)cEvalStrategyEvaluationStrategyCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEvalStrategiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cEvalStrategiesEvaluationStrategyCrossReference_5_1_0 = (CrossReference)cEvalStrategiesAssignment_5_1.eContents().get(0);
		private final RuleCall cEvalStrategiesEvaluationStrategyIDTerminalRuleCall_5_1_0_1 = (RuleCall)cEvalStrategiesEvaluationStrategyCrossReference_5_1_0.eContents().get(1);
		
		//StrategiesGroup:
		//	'strategiesGroup' name=QualifiedName
		//	longName=LongName ':'
		//	evalStrategy=[EvaluationStrategy] (',' evalStrategies+=[EvaluationStrategy])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'strategiesGroup' name=QualifiedName longName=LongName ':' evalStrategy=[EvaluationStrategy] (','
		//evalStrategies+=[EvaluationStrategy])*
		public Group getGroup() { return cGroup; }
		
		//'strategiesGroup'
		public Keyword getStrategiesGroupKeyword_0() { return cStrategiesGroupKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//evalStrategy=[EvaluationStrategy]
		public Assignment getEvalStrategyAssignment_4() { return cEvalStrategyAssignment_4; }
		
		//[EvaluationStrategy]
		public CrossReference getEvalStrategyEvaluationStrategyCrossReference_4_0() { return cEvalStrategyEvaluationStrategyCrossReference_4_0; }
		
		//ID
		public RuleCall getEvalStrategyEvaluationStrategyIDTerminalRuleCall_4_0_1() { return cEvalStrategyEvaluationStrategyIDTerminalRuleCall_4_0_1; }
		
		//(',' evalStrategies+=[EvaluationStrategy])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//evalStrategies+=[EvaluationStrategy]
		public Assignment getEvalStrategiesAssignment_5_1() { return cEvalStrategiesAssignment_5_1; }
		
		//[EvaluationStrategy]
		public CrossReference getEvalStrategiesEvaluationStrategyCrossReference_5_1_0() { return cEvalStrategiesEvaluationStrategyCrossReference_5_1_0; }
		
		//ID
		public RuleCall getEvalStrategiesEvaluationStrategyIDTerminalRuleCall_5_1_0_1() { return cEvalStrategiesEvaluationStrategyIDTerminalRuleCall_5_1_0_1; }
	}
	public class EvaluationStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.EvaluationStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInfoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInfoConcreteStrategyParserRuleCall_4_0 = (RuleCall)cInfoAssignment_4.eContents().get(0);
		private final Assignment cEvaluationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEvaluationsEvaluationParserRuleCall_5_0 = (RuleCall)cEvaluationsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIncludesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIncludedStrategyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cIncludedStrategyEvaluationStrategyCrossReference_6_1_0 = (CrossReference)cIncludedStrategyAssignment_6_1.eContents().get(0);
		private final RuleCall cIncludedStrategyEvaluationStrategyIDTerminalRuleCall_6_1_0_1 = (RuleCall)cIncludedStrategyEvaluationStrategyCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cIncludedStrategiesAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cIncludedStrategiesEvaluationStrategyCrossReference_6_2_1_0 = (CrossReference)cIncludedStrategiesAssignment_6_2_1.eContents().get(0);
		private final RuleCall cIncludedStrategiesEvaluationStrategyIDTerminalRuleCall_6_2_1_0_1 = (RuleCall)cIncludedStrategiesEvaluationStrategyCrossReference_6_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EvaluationStrategy:
		//	'strategy' name=QualifiedName
		//	longName=LongName '{'
		//	info=ConcreteStrategy?
		//	evaluations+=Evaluation* ('includes' includedStrategy=[EvaluationStrategy] (','
		//	includedStrategies+=[EvaluationStrategy])*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'strategy' name=QualifiedName longName=LongName '{' info=ConcreteStrategy? evaluations+=Evaluation* ('includes'
		//includedStrategy=[EvaluationStrategy] (',' includedStrategies+=[EvaluationStrategy])*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'strategy'
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//info=ConcreteStrategy?
		public Assignment getInfoAssignment_4() { return cInfoAssignment_4; }
		
		//ConcreteStrategy
		public RuleCall getInfoConcreteStrategyParserRuleCall_4_0() { return cInfoConcreteStrategyParserRuleCall_4_0; }
		
		//evaluations+=Evaluation*
		public Assignment getEvaluationsAssignment_5() { return cEvaluationsAssignment_5; }
		
		//Evaluation
		public RuleCall getEvaluationsEvaluationParserRuleCall_5_0() { return cEvaluationsEvaluationParserRuleCall_5_0; }
		
		//('includes' includedStrategy=[EvaluationStrategy] (',' includedStrategies+=[EvaluationStrategy])*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'includes'
		public Keyword getIncludesKeyword_6_0() { return cIncludesKeyword_6_0; }
		
		//includedStrategy=[EvaluationStrategy]
		public Assignment getIncludedStrategyAssignment_6_1() { return cIncludedStrategyAssignment_6_1; }
		
		//[EvaluationStrategy]
		public CrossReference getIncludedStrategyEvaluationStrategyCrossReference_6_1_0() { return cIncludedStrategyEvaluationStrategyCrossReference_6_1_0; }
		
		//ID
		public RuleCall getIncludedStrategyEvaluationStrategyIDTerminalRuleCall_6_1_0_1() { return cIncludedStrategyEvaluationStrategyIDTerminalRuleCall_6_1_0_1; }
		
		//(',' includedStrategies+=[EvaluationStrategy])*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//includedStrategies+=[EvaluationStrategy]
		public Assignment getIncludedStrategiesAssignment_6_2_1() { return cIncludedStrategiesAssignment_6_2_1; }
		
		//[EvaluationStrategy]
		public CrossReference getIncludedStrategiesEvaluationStrategyCrossReference_6_2_1_0() { return cIncludedStrategiesEvaluationStrategyCrossReference_6_2_1_0; }
		
		//ID
		public RuleCall getIncludedStrategiesEvaluationStrategyIDTerminalRuleCall_6_2_1_0_1() { return cIncludedStrategiesEvaluationStrategyIDTerminalRuleCall_6_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConcreteStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ConcreteStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAuthorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAuthorSTRINGTerminalRuleCall_1_0 = (RuleCall)cAuthorAssignment_1.eContents().get(0);
		
		//ConcreteStrategy:
		//	'author' author=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'author' author=STRING
		public Group getGroup() { return cGroup; }
		
		//'author'
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }
		
		//author=STRING
		public Assignment getAuthorAssignment_1() { return cAuthorAssignment_1; }
		
		//STRING
		public RuleCall getAuthorSTRINGTerminalRuleCall_1_0() { return cAuthorSTRINGTerminalRuleCall_1_0; }
	}
	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIntElementIntentionalElementCrossReference_0_0 = (CrossReference)cIntElementAssignment_0.eContents().get(0);
		private final RuleCall cIntElementIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cIntElementIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Assignment cExceedsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExceedsExceedingKeyword_1_0 = (Keyword)cExceedsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEvaluationKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Assignment cQualitativeEvaluationAssignment_2_0_1_0 = (Assignment)cAlternatives_2_0_1.eContents().get(0);
		private final RuleCall cQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_1_0_0 = (RuleCall)cQualitativeEvaluationAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cEvaluationAssignment_2_0_1_1 = (Assignment)cAlternatives_2_0_1.eContents().get(1);
		private final RuleCall cEvaluationQuantitativeValueParserRuleCall_2_0_1_1_0 = (RuleCall)cEvaluationAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIndicatorEvalAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cIndicatorEvalIndicatorEvaluationParserRuleCall_2_1_0_0 = (RuleCall)cIndicatorEvalAssignment_2_1_0.eContents().get(0);
		private final Keyword cConvertedWithKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cConversionAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cConversionIndicatorConversionCrossReference_2_1_2_0 = (CrossReference)cConversionAssignment_2_1_2.eContents().get(0);
		private final RuleCall cConversionIndicatorConversionIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cConversionIndicatorConversionCrossReference_2_1_2_0.eContents().get(1);
		
		//Evaluation:
		//	intElement=[IntentionalElement|QualifiedName] exceeds?='exceeding'? ('evaluation'
		//	(qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue) | indicatorEval=IndicatorEvaluation
		//	'convertedWith' conversion=[IndicatorConversion]);
		@Override public ParserRule getRule() { return rule; }
		
		//intElement=[IntentionalElement|QualifiedName] exceeds?='exceeding'? ('evaluation'
		//(qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue) | indicatorEval=IndicatorEvaluation
		//'convertedWith' conversion=[IndicatorConversion])
		public Group getGroup() { return cGroup; }
		
		//intElement=[IntentionalElement|QualifiedName]
		public Assignment getIntElementAssignment_0() { return cIntElementAssignment_0; }
		
		//[IntentionalElement|QualifiedName]
		public CrossReference getIntElementIntentionalElementCrossReference_0_0() { return cIntElementIntentionalElementCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getIntElementIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cIntElementIntentionalElementQualifiedNameParserRuleCall_0_0_1; }
		
		//exceeds?='exceeding'?
		public Assignment getExceedsAssignment_1() { return cExceedsAssignment_1; }
		
		//'exceeding'
		public Keyword getExceedsExceedingKeyword_1_0() { return cExceedsExceedingKeyword_1_0; }
		
		//'evaluation' (qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue) | indicatorEval=IndicatorEvaluation
		//'convertedWith' conversion=[IndicatorConversion]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'evaluation' (qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'evaluation'
		public Keyword getEvaluationKeyword_2_0_0() { return cEvaluationKeyword_2_0_0; }
		
		//qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//qualitativeEvaluation=QualitativeLabel
		public Assignment getQualitativeEvaluationAssignment_2_0_1_0() { return cQualitativeEvaluationAssignment_2_0_1_0; }
		
		//QualitativeLabel
		public RuleCall getQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_1_0_0() { return cQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_1_0_0; }
		
		//evaluation=QuantitativeValue
		public Assignment getEvaluationAssignment_2_0_1_1() { return cEvaluationAssignment_2_0_1_1; }
		
		//QuantitativeValue
		public RuleCall getEvaluationQuantitativeValueParserRuleCall_2_0_1_1_0() { return cEvaluationQuantitativeValueParserRuleCall_2_0_1_1_0; }
		
		//indicatorEval=IndicatorEvaluation 'convertedWith' conversion=[IndicatorConversion]
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//indicatorEval=IndicatorEvaluation
		public Assignment getIndicatorEvalAssignment_2_1_0() { return cIndicatorEvalAssignment_2_1_0; }
		
		//IndicatorEvaluation
		public RuleCall getIndicatorEvalIndicatorEvaluationParserRuleCall_2_1_0_0() { return cIndicatorEvalIndicatorEvaluationParserRuleCall_2_1_0_0; }
		
		//'convertedWith'
		public Keyword getConvertedWithKeyword_2_1_1() { return cConvertedWithKeyword_2_1_1; }
		
		//conversion=[IndicatorConversion]
		public Assignment getConversionAssignment_2_1_2() { return cConversionAssignment_2_1_2; }
		
		//[IndicatorConversion]
		public CrossReference getConversionIndicatorConversionCrossReference_2_1_2_0() { return cConversionIndicatorConversionCrossReference_2_1_2_0; }
		
		//ID
		public RuleCall getConversionIndicatorConversionIDTerminalRuleCall_2_1_2_0_1() { return cConversionIndicatorConversionIDTerminalRuleCall_2_1_2_0_1; }
	}
	public class IndicatorEvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.IndicatorEvaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRealWorldLabelAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRealWorldLabelSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cRealWorldLabelAssignment_1_0.eContents().get(0);
		private final Assignment cRealWorldValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRealWorldValueINTTerminalRuleCall_1_1_0 = (RuleCall)cRealWorldValueAssignment_1_1.eContents().get(0);
		
		//IndicatorEvaluation:
		//	'real' (realWorldLabel=STRING | realWorldValue=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//'real' (realWorldLabel=STRING | realWorldValue=INT)
		public Group getGroup() { return cGroup; }
		
		//'real'
		public Keyword getRealKeyword_0() { return cRealKeyword_0; }
		
		//realWorldLabel=STRING | realWorldValue=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//realWorldLabel=STRING
		public Assignment getRealWorldLabelAssignment_1_0() { return cRealWorldLabelAssignment_1_0; }
		
		//STRING
		public RuleCall getRealWorldLabelSTRINGTerminalRuleCall_1_0_0() { return cRealWorldLabelSTRINGTerminalRuleCall_1_0_0; }
		
		//realWorldValue=INT
		public Assignment getRealWorldValueAssignment_1_1() { return cRealWorldValueAssignment_1_1; }
		
		//INT
		public RuleCall getRealWorldValueINTTerminalRuleCall_1_1_0() { return cRealWorldValueINTTerminalRuleCall_1_1_0; }
	}
	public class IndicatorConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.IndicatorConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinearConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualToQMappingsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndicatorConversion:
		//	LinearConversion | QualToQMappings;
		@Override public ParserRule getRule() { return rule; }
		
		//LinearConversion | QualToQMappings
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LinearConversion
		public RuleCall getLinearConversionParserRuleCall_0() { return cLinearConversionParserRuleCall_0; }
		
		//QualToQMappings
		public RuleCall getQualToQMappingsParserRuleCall_1() { return cQualToQMappingsParserRuleCall_1; }
	}
	public class LinearConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.LinearConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearConversionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUnitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitSTRINGTerminalRuleCall_5_0 = (RuleCall)cUnitAssignment_5.eContents().get(0);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetValueINTTerminalRuleCall_7_0 = (RuleCall)cTargetValueAssignment_7.eContents().get(0);
		private final Keyword cThresholdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cThresholdValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cThresholdValueINTTerminalRuleCall_9_0 = (RuleCall)cThresholdValueAssignment_9.eContents().get(0);
		private final Keyword cWorstKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWorstValueAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWorstValueINTTerminalRuleCall_11_0 = (RuleCall)cWorstValueAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//LinearConversion:
		//	'linearConversion' name=QualifiedName
		//	longName=LongName '{'
		//	'unit' unit=STRING
		//	'target' targetValue=INT
		//	'threshold' thresholdValue=INT
		//	'worst' worstValue=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'linearConversion' name=QualifiedName longName=LongName '{' 'unit' unit=STRING 'target' targetValue=INT 'threshold'
		//thresholdValue=INT 'worst' worstValue=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'linearConversion'
		public Keyword getLinearConversionKeyword_0() { return cLinearConversionKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'unit'
		public Keyword getUnitKeyword_4() { return cUnitKeyword_4; }
		
		//unit=STRING
		public Assignment getUnitAssignment_5() { return cUnitAssignment_5; }
		
		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_5_0() { return cUnitSTRINGTerminalRuleCall_5_0; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//targetValue=INT
		public Assignment getTargetValueAssignment_7() { return cTargetValueAssignment_7; }
		
		//INT
		public RuleCall getTargetValueINTTerminalRuleCall_7_0() { return cTargetValueINTTerminalRuleCall_7_0; }
		
		//'threshold'
		public Keyword getThresholdKeyword_8() { return cThresholdKeyword_8; }
		
		//thresholdValue=INT
		public Assignment getThresholdValueAssignment_9() { return cThresholdValueAssignment_9; }
		
		//INT
		public RuleCall getThresholdValueINTTerminalRuleCall_9_0() { return cThresholdValueINTTerminalRuleCall_9_0; }
		
		//'worst'
		public Keyword getWorstKeyword_10() { return cWorstKeyword_10; }
		
		//worstValue=INT
		public Assignment getWorstValueAssignment_11() { return cWorstValueAssignment_11; }
		
		//INT
		public RuleCall getWorstValueINTTerminalRuleCall_11_0() { return cWorstValueINTTerminalRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class QualToQMappingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.QualToQMappings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingConversionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cUnitKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUnitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUnitSTRINGTerminalRuleCall_5_0 = (RuleCall)cUnitAssignment_5.eContents().get(0);
		private final Assignment cMappingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingsQualToQMappingParserRuleCall_6_0 = (RuleCall)cMappingsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QualToQMappings:
		//	'mappingConversion' name=QualifiedName
		//	longName=LongName '{'
		//	'unit' unit=STRING
		//	mappings+=QualToQMapping+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'mappingConversion' name=QualifiedName longName=LongName '{' 'unit' unit=STRING mappings+=QualToQMapping+ '}'
		public Group getGroup() { return cGroup; }
		
		//'mappingConversion'
		public Keyword getMappingConversionKeyword_0() { return cMappingConversionKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'unit'
		public Keyword getUnitKeyword_4() { return cUnitKeyword_4; }
		
		//unit=STRING
		public Assignment getUnitAssignment_5() { return cUnitAssignment_5; }
		
		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_5_0() { return cUnitSTRINGTerminalRuleCall_5_0; }
		
		//mappings+=QualToQMapping+
		public Assignment getMappingsAssignment_6() { return cMappingsAssignment_6; }
		
		//QualToQMapping
		public RuleCall getMappingsQualToQMappingParserRuleCall_6_0() { return cMappingsQualToQMappingParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class QualToQMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.QualToQMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExceedsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExceedsExceedingKeyword_0_0 = (Keyword)cExceedsAssignment_0.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRealWorldLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRealWorldLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cRealWorldLabelAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cQualitativeEvaluationAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0_0 = (RuleCall)cQualitativeEvaluationAssignment_4_0.eContents().get(0);
		private final Assignment cEvaluationAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEvaluationQuantitativeValueParserRuleCall_4_1_0 = (RuleCall)cEvaluationAssignment_4_1.eContents().get(0);
		
		//QualToQMapping:
		//	exceeds?='exceeding'? 'real' realWorldLabel=STRING '-->' (qualitativeEvaluation=QualitativeLabel |
		//	evaluation=QuantitativeValue);
		@Override public ParserRule getRule() { return rule; }
		
		//exceeds?='exceeding'? 'real' realWorldLabel=STRING '-->' (qualitativeEvaluation=QualitativeLabel |
		//evaluation=QuantitativeValue)
		public Group getGroup() { return cGroup; }
		
		//exceeds?='exceeding'?
		public Assignment getExceedsAssignment_0() { return cExceedsAssignment_0; }
		
		//'exceeding'
		public Keyword getExceedsExceedingKeyword_0_0() { return cExceedsExceedingKeyword_0_0; }
		
		//'real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
		
		//realWorldLabel=STRING
		public Assignment getRealWorldLabelAssignment_2() { return cRealWorldLabelAssignment_2; }
		
		//STRING
		public RuleCall getRealWorldLabelSTRINGTerminalRuleCall_2_0() { return cRealWorldLabelSTRINGTerminalRuleCall_2_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3; }
		
		//qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//qualitativeEvaluation=QualitativeLabel
		public Assignment getQualitativeEvaluationAssignment_4_0() { return cQualitativeEvaluationAssignment_4_0; }
		
		//QualitativeLabel
		public RuleCall getQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0_0() { return cQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0_0; }
		
		//evaluation=QuantitativeValue
		public Assignment getEvaluationAssignment_4_1() { return cEvaluationAssignment_4_1; }
		
		//QuantitativeValue
		public RuleCall getEvaluationQuantitativeValueParserRuleCall_4_1_0() { return cEvaluationQuantitativeValueParserRuleCall_4_1_0; }
	}
	public class ContributionContextGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ContributionContextGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContributionContextGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContribAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cContribContributionContextCrossReference_4_0 = (CrossReference)cContribAssignment_4.eContents().get(0);
		private final RuleCall cContribContributionContextIDTerminalRuleCall_4_0_1 = (RuleCall)cContribContributionContextCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cContribsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cContribsContributionContextCrossReference_5_1_0 = (CrossReference)cContribsAssignment_5_1.eContents().get(0);
		private final RuleCall cContribsContributionContextIDTerminalRuleCall_5_1_0_1 = (RuleCall)cContribsContributionContextCrossReference_5_1_0.eContents().get(1);
		
		//ContributionContextGroup:
		//	'contributionContextGroup' name=QualifiedName
		//	longName=LongName ':'
		//	contrib=[ContributionContext] (',' contribs+=[ContributionContext])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'contributionContextGroup' name=QualifiedName longName=LongName ':' contrib=[ContributionContext] (','
		//contribs+=[ContributionContext])*
		public Group getGroup() { return cGroup; }
		
		//'contributionContextGroup'
		public Keyword getContributionContextGroupKeyword_0() { return cContributionContextGroupKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//contrib=[ContributionContext]
		public Assignment getContribAssignment_4() { return cContribAssignment_4; }
		
		//[ContributionContext]
		public CrossReference getContribContributionContextCrossReference_4_0() { return cContribContributionContextCrossReference_4_0; }
		
		//ID
		public RuleCall getContribContributionContextIDTerminalRuleCall_4_0_1() { return cContribContributionContextIDTerminalRuleCall_4_0_1; }
		
		//(',' contribs+=[ContributionContext])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//contribs+=[ContributionContext]
		public Assignment getContribsAssignment_5_1() { return cContribsAssignment_5_1; }
		
		//[ContributionContext]
		public CrossReference getContribsContributionContextCrossReference_5_1_0() { return cContribsContributionContextCrossReference_5_1_0; }
		
		//ID
		public RuleCall getContribsContributionContextIDTerminalRuleCall_5_1_0_1() { return cContribsContributionContextIDTerminalRuleCall_5_1_0_1; }
	}
	public class ContributionContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ContributionContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContributionContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChangesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChangesContributionChangeParserRuleCall_4_0 = (RuleCall)cChangesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIncludesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIncludedContextAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cIncludedContextContributionContextCrossReference_5_1_0 = (CrossReference)cIncludedContextAssignment_5_1.eContents().get(0);
		private final RuleCall cIncludedContextContributionContextIDTerminalRuleCall_5_1_0_1 = (RuleCall)cIncludedContextContributionContextCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cIncludedContextsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cIncludedContextsContributionContextCrossReference_5_2_1_0 = (CrossReference)cIncludedContextsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cIncludedContextsContributionContextIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cIncludedContextsContributionContextCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ContributionContext:
		//	'contributionContext' name=QualifiedName
		//	longName=LongName '{'
		//	changes+=ContributionChange* ('includes' includedContext=[ContributionContext] (','
		//	includedContexts+=[ContributionContext])*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'contributionContext' name=QualifiedName longName=LongName '{' changes+=ContributionChange* ('includes'
		//includedContext=[ContributionContext] (',' includedContexts+=[ContributionContext])*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'contributionContext'
		public Keyword getContributionContextKeyword_0() { return cContributionContextKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//changes+=ContributionChange*
		public Assignment getChangesAssignment_4() { return cChangesAssignment_4; }
		
		//ContributionChange
		public RuleCall getChangesContributionChangeParserRuleCall_4_0() { return cChangesContributionChangeParserRuleCall_4_0; }
		
		//('includes' includedContext=[ContributionContext] (',' includedContexts+=[ContributionContext])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'includes'
		public Keyword getIncludesKeyword_5_0() { return cIncludesKeyword_5_0; }
		
		//includedContext=[ContributionContext]
		public Assignment getIncludedContextAssignment_5_1() { return cIncludedContextAssignment_5_1; }
		
		//[ContributionContext]
		public CrossReference getIncludedContextContributionContextCrossReference_5_1_0() { return cIncludedContextContributionContextCrossReference_5_1_0; }
		
		//ID
		public RuleCall getIncludedContextContributionContextIDTerminalRuleCall_5_1_0_1() { return cIncludedContextContributionContextIDTerminalRuleCall_5_1_0_1; }
		
		//(',' includedContexts+=[ContributionContext])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//includedContexts+=[ContributionContext]
		public Assignment getIncludedContextsAssignment_5_2_1() { return cIncludedContextsAssignment_5_2_1; }
		
		//[ContributionContext]
		public CrossReference getIncludedContextsContributionContextCrossReference_5_2_1_0() { return cIncludedContextsContributionContextCrossReference_5_2_1_0; }
		
		//ID
		public RuleCall getIncludedContextsContributionContextIDTerminalRuleCall_5_2_1_0_1() { return cIncludedContextsContributionContextIDTerminalRuleCall_5_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ContributionChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ContributionChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cContributionContributionCrossReference_0_0 = (CrossReference)cContributionAssignment_0.eContents().get(0);
		private final RuleCall cContributionContributionQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cContributionContributionCrossReference_0_0.eContents().get(1);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNewContributionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNewContributionContributionTypeEnumRuleCall_2_0_0 = (RuleCall)cNewContributionAssignment_2_0.eContents().get(0);
		private final Assignment cNewQuantitativeContributionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNewQuantitativeContributionQuantitativeValueParserRuleCall_2_1_0 = (RuleCall)cNewQuantitativeContributionAssignment_2_1.eContents().get(0);
		
		//ContributionChange:
		//	contribution=[Contribution|QualifiedName]
		//	'with' (newContribution=ContributionType | newQuantitativeContribution=QuantitativeValue);
		@Override public ParserRule getRule() { return rule; }
		
		//contribution=[Contribution|QualifiedName] 'with' (newContribution=ContributionType |
		//newQuantitativeContribution=QuantitativeValue)
		public Group getGroup() { return cGroup; }
		
		//contribution=[Contribution|QualifiedName]
		public Assignment getContributionAssignment_0() { return cContributionAssignment_0; }
		
		//[Contribution|QualifiedName]
		public CrossReference getContributionContributionCrossReference_0_0() { return cContributionContributionCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getContributionContributionQualifiedNameParserRuleCall_0_0_1() { return cContributionContributionQualifiedNameParserRuleCall_0_0_1; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//newContribution=ContributionType | newQuantitativeContribution=QuantitativeValue
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//newContribution=ContributionType
		public Assignment getNewContributionAssignment_2_0() { return cNewContributionAssignment_2_0; }
		
		//ContributionType
		public RuleCall getNewContributionContributionTypeEnumRuleCall_2_0_0() { return cNewContributionContributionTypeEnumRuleCall_2_0_0; }
		
		//newQuantitativeContribution=QuantitativeValue
		public Assignment getNewQuantitativeContributionAssignment_2_1() { return cNewQuantitativeContributionAssignment_2_1; }
		
		//QuantitativeValue
		public RuleCall getNewQuantitativeContributionQuantitativeValueParserRuleCall_2_1_0() { return cNewQuantitativeContributionQuantitativeValueParserRuleCall_2_1_0; }
	}
	public class QuantitativeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.QuantitativeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QuantitativeValue ecore::EInt:
		//	('-' | '+')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('-' | '+')? INT
		public Group getGroup() { return cGroup; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class UCMmapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.UCMmap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingletonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSingletonSingletonKeyword_0_0 = (Keyword)cSingletonAssignment_0.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLongNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLongNameLongNameParserRuleCall_3_0 = (RuleCall)cLongNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStubsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStubsStubDeclarationParserRuleCall_5_0 = (RuleCall)cStubsAssignment_5.eContents().get(0);
		private final Assignment cPathsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPathsPathParserRuleCall_6_0 = (RuleCall)cPathsAssignment_6.eContents().get(0);
		private final Assignment cComponentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComponentsComponentRefParserRuleCall_7_0 = (RuleCall)cComponentsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//UCMmap:
		//	singleton?='singleton'? 'map' name=QualifiedName
		//	longName=LongName '{'
		//	stubs+=StubDeclaration*
		//	paths+=Path*
		//	components+=ComponentRef*
		//	//comment+=ML_COMMENT*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//singleton?='singleton'? 'map' name=QualifiedName longName=LongName '{' stubs+=StubDeclaration* paths+=Path*
		//components+=ComponentRef* //comment+=ML_COMMENT*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//singleton?='singleton'?
		public Assignment getSingletonAssignment_0() { return cSingletonAssignment_0; }
		
		//'singleton'
		public Keyword getSingletonSingletonKeyword_0_0() { return cSingletonSingletonKeyword_0_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_3() { return cLongNameAssignment_3; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_3_0() { return cLongNameLongNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//stubs+=StubDeclaration*
		public Assignment getStubsAssignment_5() { return cStubsAssignment_5; }
		
		//StubDeclaration
		public RuleCall getStubsStubDeclarationParserRuleCall_5_0() { return cStubsStubDeclarationParserRuleCall_5_0; }
		
		//paths+=Path*
		public Assignment getPathsAssignment_6() { return cPathsAssignment_6; }
		
		//Path
		public RuleCall getPathsPathParserRuleCall_6_0() { return cPathsPathParserRuleCall_6_0; }
		
		//components+=ComponentRef*
		public Assignment getComponentsAssignment_7() { return cComponentsAssignment_7; }
		
		//ComponentRef
		public RuleCall getComponentsComponentRefParserRuleCall_7_0() { return cComponentsComponentRefParserRuleCall_7_0; }
		
		////comment+=ML_COMMENT*
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartPointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartPointStartPointParserRuleCall_0_0 = (RuleCall)cStartPointAssignment_0.eContents().get(0);
		private final Assignment cPathBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathBodyPathBodyParserRuleCall_1_0 = (RuleCall)cPathBodyAssignment_1.eContents().get(0);
		
		//Path:
		//	startPoint=StartPoint
		//	pathBody=PathBody;
		@Override public ParserRule getRule() { return rule; }
		
		//startPoint=StartPoint pathBody=PathBody
		public Group getGroup() { return cGroup; }
		
		//startPoint=StartPoint
		public Assignment getStartPointAssignment_0() { return cStartPointAssignment_0; }
		
		//StartPoint
		public RuleCall getStartPointStartPointParserRuleCall_0_0() { return cStartPointStartPointParserRuleCall_0_0; }
		
		//pathBody=PathBody
		public Assignment getPathBodyAssignment_1() { return cPathBodyAssignment_1; }
		
		//PathBody
		public RuleCall getPathBodyPathBodyParserRuleCall_1_0() { return cPathBodyPathBodyParserRuleCall_1_0; }
	}
	public class StartPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StartPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cStartKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cLongNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_0_1_1_0 = (RuleCall)cLongNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cPreconditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPreconditionConditionParserRuleCall_0_2_0 = (RuleCall)cPreconditionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFailKindAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFailKindFailureKindParserRuleCall_1_0_0 = (RuleCall)cFailKindAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cLongNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_1_2_0 = (RuleCall)cLongNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCatchesKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cCatchesAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cCatchesSTRINGTerminalRuleCall_1_3_2_0 = (RuleCall)cCatchesAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		
		//StartPoint:
		//	'start' (name=QualifiedName longName=LongName)? precondition=Condition? | failKind=FailureKind name=QualifiedName
		//	longName=LongName ('catches' '[[' catches=STRING ']]')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'start' (name=QualifiedName longName=LongName)? precondition=Condition? | failKind=FailureKind name=QualifiedName
		//longName=LongName ('catches' '[[' catches=STRING ']]')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'start' (name=QualifiedName longName=LongName)? precondition=Condition?
		public Group getGroup_0() { return cGroup_0; }
		
		//'start'
		public Keyword getStartKeyword_0_0() { return cStartKeyword_0_0; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0_0() { return cNameQualifiedNameParserRuleCall_0_1_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_0_1_1() { return cLongNameAssignment_0_1_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_0_1_1_0() { return cLongNameLongNameParserRuleCall_0_1_1_0; }
		
		//precondition=Condition?
		public Assignment getPreconditionAssignment_0_2() { return cPreconditionAssignment_0_2; }
		
		//Condition
		public RuleCall getPreconditionConditionParserRuleCall_0_2_0() { return cPreconditionConditionParserRuleCall_0_2_0; }
		
		//failKind=FailureKind name=QualifiedName longName=LongName ('catches' '[[' catches=STRING ']]')?
		public Group getGroup_1() { return cGroup_1; }
		
		//failKind=FailureKind
		public Assignment getFailKindAssignment_1_0() { return cFailKindAssignment_1_0; }
		
		//FailureKind
		public RuleCall getFailKindFailureKindParserRuleCall_1_0_0() { return cFailKindFailureKindParserRuleCall_1_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1_2() { return cLongNameAssignment_1_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_2_0() { return cLongNameLongNameParserRuleCall_1_2_0; }
		
		//('catches' '[[' catches=STRING ']]')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'catches'
		public Keyword getCatchesKeyword_1_3_0() { return cCatchesKeyword_1_3_0; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1_3_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1_3_1; }
		
		//catches=STRING
		public Assignment getCatchesAssignment_1_3_2() { return cCatchesAssignment_1_3_2; }
		
		//STRING
		public RuleCall getCatchesSTRINGTerminalRuleCall_1_3_2_0() { return cCatchesSTRINGTerminalRuleCall_1_3_2_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_1_3_3() { return cRightSquareBracketRightSquareBracketKeyword_1_3_3; }
	}
	public class FailureKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.FailureKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbortKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFailureKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FailureKind:
		//	'abort' | 'failure';
		@Override public ParserRule getRule() { return rule; }
		
		//'abort' | 'failure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'abort'
		public Keyword getAbortKeyword_0() { return cAbortKeyword_0; }
		
		//'failure'
		public Keyword getFailureKeyword_1() { return cFailureKeyword_1; }
	}
	public class PathBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathBody");
		private final RuleCall cPathWithRegularEndParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PathBody:
		//	PathWithRegularEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//PathWithRegularEnd
		public RuleCall getPathWithRegularEndParserRuleCall() { return cPathWithRegularEndParserRuleCall; }
	}
	public class PathWithRegularEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathWithRegularEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathWithReferencedEndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPathEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathEndRegularEndParserRuleCall_1_0 = (RuleCall)cPathEndAssignment_1.eContents().get(0);
		
		//PathWithRegularEnd PathBody:
		//	PathWithReferencedEnd pathEnd=RegularEnd?;
		@Override public ParserRule getRule() { return rule; }
		
		//PathWithReferencedEnd pathEnd=RegularEnd?
		public Group getGroup() { return cGroup; }
		
		//PathWithReferencedEnd
		public RuleCall getPathWithReferencedEndParserRuleCall_0() { return cPathWithReferencedEndParserRuleCall_0; }
		
		//pathEnd=RegularEnd?
		public Assignment getPathEndAssignment_1() { return cPathEndAssignment_1; }
		
		//RegularEnd
		public RuleCall getPathEndRegularEndParserRuleCall_1_0() { return cPathEndRegularEndParserRuleCall_1_0; }
	}
	public class PathWithReferencedEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathWithReferencedEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathWithReferencedStubParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReferencedEndAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cReferencedEndReferencedEndCrossReference_1_0_0 = (CrossReference)cReferencedEndAssignment_1_0.eContents().get(0);
		private final RuleCall cReferencedEndReferencedEndIDTerminalRuleCall_1_0_0_1 = (RuleCall)cReferencedEndReferencedEndCrossReference_1_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PathWithReferencedEnd PathBody:
		//	PathWithReferencedStub (referencedEnd=[ReferencedEnd]? ';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//PathWithReferencedStub (referencedEnd=[ReferencedEnd]? ';')?
		public Group getGroup() { return cGroup; }
		
		//PathWithReferencedStub
		public RuleCall getPathWithReferencedStubParserRuleCall_0() { return cPathWithReferencedStubParserRuleCall_0; }
		
		//(referencedEnd=[ReferencedEnd]? ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//referencedEnd=[ReferencedEnd]?
		public Assignment getReferencedEndAssignment_1_0() { return cReferencedEndAssignment_1_0; }
		
		//[ReferencedEnd]
		public CrossReference getReferencedEndReferencedEndCrossReference_1_0_0() { return cReferencedEndReferencedEndCrossReference_1_0_0; }
		
		//ID
		public RuleCall getReferencedEndReferencedEndIDTerminalRuleCall_1_0_0_1() { return cReferencedEndReferencedEndIDTerminalRuleCall_1_0_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class PathWithReferencedStubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathWithReferencedStub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathBodyNodesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencedStubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReferencedStubStubCrossReference_1_1_0 = (CrossReference)cReferencedStubAssignment_1_1.eContents().get(0);
		private final RuleCall cReferencedStubStubQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cReferencedStubStubCrossReference_1_1_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexPositiveIntegerParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PathWithReferencedStub PathBody:
		//	PathBodyNodes ('in'
		//	referencedStub=[Stub|QualifiedName] index=PositiveInteger ';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//PathBodyNodes ('in' referencedStub=[Stub|QualifiedName] index=PositiveInteger ';')?
		public Group getGroup() { return cGroup; }
		
		//PathBodyNodes
		public RuleCall getPathBodyNodesParserRuleCall_0() { return cPathBodyNodesParserRuleCall_0; }
		
		//('in' referencedStub=[Stub|QualifiedName] index=PositiveInteger ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'in'
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }
		
		//referencedStub=[Stub|QualifiedName]
		public Assignment getReferencedStubAssignment_1_1() { return cReferencedStubAssignment_1_1; }
		
		//[Stub|QualifiedName]
		public CrossReference getReferencedStubStubCrossReference_1_1_0() { return cReferencedStubStubCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getReferencedStubStubQualifiedNameParserRuleCall_1_1_0_1() { return cReferencedStubStubQualifiedNameParserRuleCall_1_1_0_1; }
		
		//index=PositiveInteger
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//PositiveInteger
		public RuleCall getIndexPositiveIntegerParserRuleCall_1_2_0() { return cIndexPositiveIntegerParserRuleCall_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class PathBodyNodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathBodyNodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathBodyNodesAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cArrowParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPathNodesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPathNodesPathBodyNodeParserRuleCall_2_0_0 = (RuleCall)cPathNodesAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//PathBodyNodes PathBody:
		//	{PathBodyNodes} Arrow (pathNodes+=PathBodyNode '->')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PathBodyNodes} Arrow (pathNodes+=PathBodyNode '->')*
		public Group getGroup() { return cGroup; }
		
		//{PathBodyNodes}
		public Action getPathBodyNodesAction_0() { return cPathBodyNodesAction_0; }
		
		//Arrow
		public RuleCall getArrowParserRuleCall_1() { return cArrowParserRuleCall_1; }
		
		//(pathNodes+=PathBodyNode '->')*
		public Group getGroup_2() { return cGroup_2; }
		
		//pathNodes+=PathBodyNode
		public Assignment getPathNodesAssignment_2_0() { return cPathNodesAssignment_2_0; }
		
		//PathBodyNode
		public RuleCall getPathNodesPathBodyNodeParserRuleCall_2_0_0() { return cPathNodesPathBodyNodeParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
	}
	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Arrow");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Arrow:
		//	'->';
		@Override public ParserRule getRule() { return rule; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}
	public class PathBodyNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PathBodyNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndJoinParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRespRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWaitingPlaceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFailurePointParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConnectParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PathBodyNode:
		//	AndJoin | RespRef | OrJoin | WaitingPlace | FailurePoint | Timer | Connect;
		@Override public ParserRule getRule() { return rule; }
		
		//AndJoin | RespRef | OrJoin | WaitingPlace | FailurePoint | Timer | Connect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndJoin
		public RuleCall getAndJoinParserRuleCall_0() { return cAndJoinParserRuleCall_0; }
		
		//RespRef
		public RuleCall getRespRefParserRuleCall_1() { return cRespRefParserRuleCall_1; }
		
		//OrJoin
		public RuleCall getOrJoinParserRuleCall_2() { return cOrJoinParserRuleCall_2; }
		
		//WaitingPlace
		public RuleCall getWaitingPlaceParserRuleCall_3() { return cWaitingPlaceParserRuleCall_3; }
		
		//FailurePoint
		public RuleCall getFailurePointParserRuleCall_4() { return cFailurePointParserRuleCall_4; }
		
		//Timer
		public RuleCall getTimerParserRuleCall_5() { return cTimerParserRuleCall_5; }
		
		//Connect
		public RuleCall getConnectParserRuleCall_6() { return cConnectParserRuleCall_6; }
	}
	public class RegularEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.RegularEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndpointWithConnectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndForkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrForkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStubParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RegularEnd:
		//	EndpointWithConnect | AndFork | OrFork | Stub;
		@Override public ParserRule getRule() { return rule; }
		
		//EndpointWithConnect | AndFork | OrFork | Stub
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EndpointWithConnect
		public RuleCall getEndpointWithConnectParserRuleCall_0() { return cEndpointWithConnectParserRuleCall_0; }
		
		//AndFork
		public RuleCall getAndForkParserRuleCall_1() { return cAndForkParserRuleCall_1; }
		
		//OrFork
		public RuleCall getOrForkParserRuleCall_2() { return cOrForkParserRuleCall_2; }
		
		//Stub
		public RuleCall getStubParserRuleCall_3() { return cStubParserRuleCall_3; }
	}
	public class EndpointWithConnectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.EndpointWithConnect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegularEndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegularEndEndPointParserRuleCall_0_0 = (RuleCall)cRegularEndAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConnectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConnectConnectParserRuleCall_1_1_0 = (RuleCall)cConnectAssignment_1_1.eContents().get(0);
		
		////synchronous trigger
		//EndpointWithConnect:
		//	regularEnd=EndPoint ('->' connect=Connect)?;
		@Override public ParserRule getRule() { return rule; }
		
		//regularEnd=EndPoint ('->' connect=Connect)?
		public Group getGroup() { return cGroup; }
		
		//regularEnd=EndPoint
		public Assignment getRegularEndAssignment_0() { return cRegularEndAssignment_0; }
		
		//EndPoint
		public RuleCall getRegularEndEndPointParserRuleCall_0_0() { return cRegularEndEndPointParserRuleCall_0_0; }
		
		//('->' connect=Connect)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//connect=Connect
		public Assignment getConnectAssignment_1_1() { return cConnectAssignment_1_1; }
		
		//Connect
		public RuleCall getConnectConnectParserRuleCall_1_1_0() { return cConnectConnectParserRuleCall_1_1_0; }
	}
	public class ReferencedEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ReferencedEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRespRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrJoinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFailurePointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ReferencedEnd:
		//	RespRef | OrJoin | AndJoin | FailurePoint;
		@Override public ParserRule getRule() { return rule; }
		
		//RespRef | OrJoin | AndJoin | FailurePoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RespRef
		public RuleCall getRespRefParserRuleCall_0() { return cRespRefParserRuleCall_0; }
		
		//OrJoin
		public RuleCall getOrJoinParserRuleCall_1() { return cOrJoinParserRuleCall_1; }
		
		//AndJoin
		public RuleCall getAndJoinParserRuleCall_2() { return cAndJoinParserRuleCall_2; }
		
		//FailurePoint
		public RuleCall getFailurePointParserRuleCall_3() { return cFailurePointParserRuleCall_3; }
	}
	public class RespRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.RespRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		
		//RespRef:
		//	'X' name=QualifiedName
		//	longName=LongName;
		@Override public ParserRule getRule() { return rule; }
		
		//'X' name=QualifiedName longName=LongName
		public Group getGroup() { return cGroup; }
		
		//'X'
		public Keyword getXKeyword_0() { return cXKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
	}
	public class OrJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.OrJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cJoinKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		
		//OrJoin:
		//	{OrJoin} ('join' name=QualifiedName) longName=LongName;
		@Override public ParserRule getRule() { return rule; }
		
		//{OrJoin} ('join' name=QualifiedName) longName=LongName
		public Group getGroup() { return cGroup; }
		
		//{OrJoin}
		public Action getOrJoinAction_0() { return cOrJoinAction_0; }
		
		//'join' name=QualifiedName
		public Group getGroup_1() { return cGroup_1; }
		
		//'join'
		public Keyword getJoinKeyword_1_0() { return cJoinKeyword_1_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_1_0() { return cNameQualifiedNameParserRuleCall_1_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
	}
	public class AndJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.AndJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSynchKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSyncKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLongNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0 = (RuleCall)cLongNameAssignment_2.eContents().get(0);
		
		//AndJoin:
		//	('synch' | 'sync' | '|') name=QualifiedName longName=LongName;
		@Override public ParserRule getRule() { return rule; }
		
		//('synch' | 'sync' | '|') name=QualifiedName longName=LongName
		public Group getGroup() { return cGroup; }
		
		//'synch' | 'sync' | '|'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'synch'
		public Keyword getSynchKeyword_0_0() { return cSynchKeyword_0_0; }
		
		//'sync'
		public Keyword getSyncKeyword_0_1() { return cSyncKeyword_0_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2() { return cLongNameAssignment_2; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0() { return cLongNameLongNameParserRuleCall_2_0; }
	}
	public class WaitingPlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.WaitingPlace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitingPlaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindWAITKINDEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cWaitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Assignment cLongNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_3_1_0 = (RuleCall)cLongNameAssignment_3_1.eContents().get(0);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		
		//WaitingPlace:
		//	{WaitingPlace} kind=WAITKIND? 'wait' (name=QualifiedName longName=LongName)?
		//	condition=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//{WaitingPlace} kind=WAITKIND? 'wait' (name=QualifiedName longName=LongName)? condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{WaitingPlace}
		public Action getWaitingPlaceAction_0() { return cWaitingPlaceAction_0; }
		
		//kind=WAITKIND?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//WAITKIND
		public RuleCall getKindWAITKINDEnumRuleCall_1_0() { return cKindWAITKINDEnumRuleCall_1_0; }
		
		//'wait'
		public Keyword getWaitKeyword_2() { return cWaitKeyword_2; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_3() { return cGroup_3; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0_0() { return cNameQualifiedNameParserRuleCall_3_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_3_1() { return cLongNameAssignment_3_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_3_1_0() { return cLongNameLongNameParserRuleCall_3_1_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_0() { return cConditionConditionParserRuleCall_4_0; }
	}
	public class TimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Timer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindWAITKINDEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cTimerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Assignment cLongNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_3_1_0 = (RuleCall)cLongNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTimeoutKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTimeoutConditionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTimeoutConditionConditionParserRuleCall_4_2_0 = (RuleCall)cTimeoutConditionAssignment_4_2.eContents().get(0);
		private final Assignment cTimeoutPathAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTimeoutPathPathBodyParserRuleCall_4_3_0 = (RuleCall)cTimeoutPathAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		
		//Timer:
		//	{Timer} kind=WAITKIND? 'timer' (name=QualifiedName longName=LongName)? ('{'
		//	'timeout'? timeoutCondition=Condition? timeoutPath=PathBody?
		//	'}')? condition=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Timer} kind=WAITKIND? 'timer' (name=QualifiedName longName=LongName)? ('{' 'timeout'? timeoutCondition=Condition?
		//timeoutPath=PathBody? '}')? condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//{Timer}
		public Action getTimerAction_0() { return cTimerAction_0; }
		
		//kind=WAITKIND?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//WAITKIND
		public RuleCall getKindWAITKINDEnumRuleCall_1_0() { return cKindWAITKINDEnumRuleCall_1_0; }
		
		//'timer'
		public Keyword getTimerKeyword_2() { return cTimerKeyword_2; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_3() { return cGroup_3; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0_0() { return cNameQualifiedNameParserRuleCall_3_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_3_1() { return cLongNameAssignment_3_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_3_1_0() { return cLongNameLongNameParserRuleCall_3_1_0; }
		
		//('{' 'timeout'? timeoutCondition=Condition? timeoutPath=PathBody? '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//'timeout'?
		public Keyword getTimeoutKeyword_4_1() { return cTimeoutKeyword_4_1; }
		
		//timeoutCondition=Condition?
		public Assignment getTimeoutConditionAssignment_4_2() { return cTimeoutConditionAssignment_4_2; }
		
		//Condition
		public RuleCall getTimeoutConditionConditionParserRuleCall_4_2_0() { return cTimeoutConditionConditionParserRuleCall_4_2_0; }
		
		//timeoutPath=PathBody?
		public Assignment getTimeoutPathAssignment_4_3() { return cTimeoutPathAssignment_4_3; }
		
		//PathBody
		public RuleCall getTimeoutPathPathBodyParserRuleCall_4_3_0() { return cTimeoutPathPathBodyParserRuleCall_4_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_0() { return cConditionConditionParserRuleCall_5_0; }
	}
	public class ConnectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Connect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConnectsToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConnectsToConnectElementCrossReference_1_0 = (CrossReference)cConnectsToAssignment_1.eContents().get(0);
		private final RuleCall cConnectsToConnectElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cConnectsToConnectElementCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Connect:
		//	'trigger'
		//	connectsTo=[ConnectElement|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger' connectsTo=[ConnectElement|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//connectsTo=[ConnectElement|QualifiedName]
		public Assignment getConnectsToAssignment_1() { return cConnectsToAssignment_1; }
		
		//[ConnectElement|QualifiedName]
		public CrossReference getConnectsToConnectElementCrossReference_1_0() { return cConnectsToConnectElementCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getConnectsToConnectElementQualifiedNameParserRuleCall_1_0_1() { return cConnectsToConnectElementQualifiedNameParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ConnectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ConnectElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWaitingPlaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStartPointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConnectElement:
		//	WaitingPlace | Timer | StartPoint;
		@Override public ParserRule getRule() { return rule; }
		
		//WaitingPlace | Timer | StartPoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WaitingPlace
		public RuleCall getWaitingPlaceParserRuleCall_0() { return cWaitingPlaceParserRuleCall_0; }
		
		//Timer
		public RuleCall getTimerParserRuleCall_1() { return cTimerParserRuleCall_1; }
		
		//StartPoint
		public RuleCall getStartPointParserRuleCall_2() { return cStartPointParserRuleCall_2; }
	}
	public class FailurePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.FailurePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFailurePointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cLongNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_2_1_0 = (RuleCall)cLongNameAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_3_0_0_0 = (RuleCall)cConditionAssignment_3_0_0.eContents().get(0);
		private final Assignment cFailLabelAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cFailLabelFailureLabelParserRuleCall_3_0_1_0 = (RuleCall)cFailLabelAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cFailLabelAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFailLabelFailureLabelParserRuleCall_3_1_0_0 = (RuleCall)cFailLabelAssignment_3_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_3_1_1_0 = (RuleCall)cConditionAssignment_3_1_1.eContents().get(0);
		
		//FailurePoint:
		//	{FailurePoint} 'fail' (name=QualifiedName longName=LongName)? (condition=Condition failLabel=FailureLabel |
		//	failLabel=FailureLabel condition=Condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FailurePoint} 'fail' (name=QualifiedName longName=LongName)? (condition=Condition failLabel=FailureLabel |
		//failLabel=FailureLabel condition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//{FailurePoint}
		public Action getFailurePointAction_0() { return cFailurePointAction_0; }
		
		//'fail'
		public Keyword getFailKeyword_1() { return cFailKeyword_1; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_2() { return cGroup_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0_0() { return cNameQualifiedNameParserRuleCall_2_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2_1() { return cLongNameAssignment_2_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_1_0() { return cLongNameLongNameParserRuleCall_2_1_0; }
		
		//(condition=Condition failLabel=FailureLabel | failLabel=FailureLabel condition=Condition)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//condition=Condition failLabel=FailureLabel
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3_0_0() { return cConditionAssignment_3_0_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0_0_0() { return cConditionConditionParserRuleCall_3_0_0_0; }
		
		//failLabel=FailureLabel
		public Assignment getFailLabelAssignment_3_0_1() { return cFailLabelAssignment_3_0_1; }
		
		//FailureLabel
		public RuleCall getFailLabelFailureLabelParserRuleCall_3_0_1_0() { return cFailLabelFailureLabelParserRuleCall_3_0_1_0; }
		
		//failLabel=FailureLabel condition=Condition
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//failLabel=FailureLabel
		public Assignment getFailLabelAssignment_3_1_0() { return cFailLabelAssignment_3_1_0; }
		
		//FailureLabel
		public RuleCall getFailLabelFailureLabelParserRuleCall_3_1_0_0() { return cFailLabelFailureLabelParserRuleCall_3_1_0_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3_1_1() { return cConditionAssignment_3_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_1_1_0() { return cConditionConditionParserRuleCall_3_1_1_0; }
	}
	public class EndPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.EndPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cLongNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_1_1_0 = (RuleCall)cLongNameAssignment_1_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EndPoint:
		//	'end' (name=QualifiedName longName=LongName)? condition=Condition? '.';
		@Override public ParserRule getRule() { return rule; }
		
		//'end' (name=QualifiedName longName=LongName)? condition=Condition? '.'
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_0() { return cNameQualifiedNameParserRuleCall_1_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1_1() { return cLongNameAssignment_1_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_1_0() { return cLongNameLongNameParserRuleCall_1_1_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class OrForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.OrFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_0_0_0 = (RuleCall)cNameAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cLongNameAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_1_0_0_1_0 = (RuleCall)cLongNameAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBodyOrBodyParserRuleCall_1_0_2_0 = (RuleCall)cBodyAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Assignment cConnectingOrBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectingOrBodyPathBodyParserRuleCall_2_0 = (RuleCall)cConnectingOrBodyAssignment_2.eContents().get(0);
		
		//OrFork:
		//	'or' ((name=QualifiedName longName=LongName)? '{'
		//	body=OrBody
		//	'}' | condition=Condition) connectingOrBody=PathBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'or' ((name=QualifiedName longName=LongName)? '{' body=OrBody '}' | condition=Condition) connectingOrBody=PathBody?
		public Group getGroup() { return cGroup; }
		
		//'or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//(name=QualifiedName longName=LongName)? '{' body=OrBody '}' | condition=Condition
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(name=QualifiedName longName=LongName)? '{' body=OrBody '}'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_0_0_0() { return cNameAssignment_1_0_0_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_0_0_0() { return cNameQualifiedNameParserRuleCall_1_0_0_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1_0_0_1() { return cLongNameAssignment_1_0_0_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_0_0_1_0() { return cLongNameLongNameParserRuleCall_1_0_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }
		
		//body=OrBody
		public Assignment getBodyAssignment_1_0_2() { return cBodyAssignment_1_0_2; }
		
		//OrBody
		public RuleCall getBodyOrBodyParserRuleCall_1_0_2_0() { return cBodyOrBodyParserRuleCall_1_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_3() { return cRightCurlyBracketKeyword_1_0_3; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
		
		//connectingOrBody=PathBody?
		public Assignment getConnectingOrBodyAssignment_2() { return cConnectingOrBodyAssignment_2; }
		
		//PathBody
		public RuleCall getConnectingOrBodyPathBodyParserRuleCall_2_0() { return cConnectingOrBodyPathBodyParserRuleCall_2_0; }
	}
	public class OrBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.OrBody");
		private final RuleCall cElseOrForkBodyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OrBody:
		//	ElseOrForkBody;
		@Override public ParserRule getRule() { return rule; }
		
		//ElseOrForkBody
		public RuleCall getElseOrForkBodyParserRuleCall() { return cElseOrForkBodyParserRuleCall; }
	}
	public class ElseOrForkBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ElseOrForkBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrForkBodyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElseBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElseBodyPathBodyParserRuleCall_1_1_0 = (RuleCall)cElseBodyAssignment_1_1.eContents().get(0);
		
		//ElseOrForkBody OrBody:
		//	OrForkBody ('[else]' elseBody=PathBody)?;
		@Override public ParserRule getRule() { return rule; }
		
		//OrForkBody ('[else]' elseBody=PathBody)?
		public Group getGroup() { return cGroup; }
		
		//OrForkBody
		public RuleCall getOrForkBodyParserRuleCall_0() { return cOrForkBodyParserRuleCall_0; }
		
		//('[else]' elseBody=PathBody)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'[else]'
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }
		
		//elseBody=PathBody
		public Assignment getElseBodyAssignment_1_1() { return cElseBodyAssignment_1_1; }
		
		//PathBody
		public RuleCall getElseBodyPathBodyParserRuleCall_1_1_0() { return cElseBodyPathBodyParserRuleCall_1_1_0; }
	}
	public class OrForkBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.OrForkBody");
		private final Assignment cRegularBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRegularBodyRegularOrForkParserRuleCall_0 = (RuleCall)cRegularBodyAssignment.eContents().get(0);
		
		//OrForkBody OrBody:
		//	regularBody+=RegularOrFork+;
		@Override public ParserRule getRule() { return rule; }
		
		//regularBody+=RegularOrFork+
		public Assignment getRegularBodyAssignment() { return cRegularBodyAssignment; }
		
		//RegularOrFork
		public RuleCall getRegularBodyRegularOrForkParserRuleCall_0() { return cRegularBodyRegularOrForkParserRuleCall_0; }
	}
	public class RegularOrForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.RegularOrFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cPathBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathBodyPathBodyParserRuleCall_1_0 = (RuleCall)cPathBodyAssignment_1.eContents().get(0);
		
		//RegularOrFork:
		//	condition=Condition
		//	pathBody=PathBody;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition pathBody=PathBody
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//pathBody=PathBody
		public Assignment getPathBodyAssignment_1() { return cPathBodyAssignment_1; }
		
		//PathBody
		public RuleCall getPathBodyPathBodyParserRuleCall_1_0() { return cPathBodyPathBodyParserRuleCall_1_0; }
	}
	public class AndForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.AndFork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cLongNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_1_1_0 = (RuleCall)cLongNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPathbodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPathbodyPathBodyParserRuleCall_3_1_0 = (RuleCall)cPathbodyAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConnectingAndBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConnectingAndBodyPathBodyParserRuleCall_5_0 = (RuleCall)cConnectingAndBodyAssignment_5.eContents().get(0);
		
		//AndFork:
		//	'and' (name=QualifiedName longName=LongName)? '{' ('*' pathbody+=PathBody)*
		//	'}' connectingAndBody=PathBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' (name=QualifiedName longName=LongName)? '{' ('*' pathbody+=PathBody)* '}' connectingAndBody=PathBody?
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0_0() { return cNameQualifiedNameParserRuleCall_1_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1_1() { return cLongNameAssignment_1_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_1_0() { return cLongNameLongNameParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('*' pathbody+=PathBody)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0() { return cAsteriskKeyword_3_0; }
		
		//pathbody+=PathBody
		public Assignment getPathbodyAssignment_3_1() { return cPathbodyAssignment_3_1; }
		
		//PathBody
		public RuleCall getPathbodyPathBodyParserRuleCall_3_1_0() { return cPathbodyPathBodyParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//connectingAndBody=PathBody?
		public Assignment getConnectingAndBodyAssignment_5() { return cConnectingAndBodyAssignment_5; }
		
		//PathBody
		public RuleCall getConnectingAndBodyPathBodyParserRuleCall_5_0() { return cConnectingAndBodyPathBodyParserRuleCall_5_0; }
	}
	public class StubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Stub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStubTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStubTypeStubTypeParserRuleCall_0_0 = (RuleCall)cStubTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cStubKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cInKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIndexPositiveIntegerParserRuleCall_1_1_1_0 = (RuleCall)cIndexAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0_0_0_0 = (RuleCall)cNameAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cLongNameAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_2_0_0_1_0 = (RuleCall)cLongNameAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParamsStubParametersParserRuleCall_2_0_1_0 = (RuleCall)cParamsAssignment_2_0_1.eContents().get(0);
		private final Assignment cStubRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cStubRefStubDeclarationCrossReference_2_1_0 = (CrossReference)cStubRefAssignment_2_1.eContents().get(0);
		private final RuleCall cStubRefStubDeclarationQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cStubRefStubDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutPathsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutPathsStubOutPathParserRuleCall_3_1_0 = (RuleCall)cOutPathsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cConnectingStubBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectingStubBodyPathBodyParserRuleCall_4_0 = (RuleCall)cConnectingStubBodyAssignment_4.eContents().get(0);
		
		//Stub:
		//	stubType=StubType? ('stub' ('in' index=PositiveInteger)?) ((name=QualifiedName longName=LongName)?
		//	params=StubParameters | stubRef=[StubDeclaration|QualifiedName]) ('{'
		//	outPaths+=StubOutPath*
		//	'}')?
		//	connectingStubBody=PathBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//stubType=StubType? ('stub' ('in' index=PositiveInteger)?) ((name=QualifiedName longName=LongName)? params=StubParameters
		//| stubRef=[StubDeclaration|QualifiedName]) ('{' outPaths+=StubOutPath* '}')? connectingStubBody=PathBody?
		public Group getGroup() { return cGroup; }
		
		//stubType=StubType?
		public Assignment getStubTypeAssignment_0() { return cStubTypeAssignment_0; }
		
		//StubType
		public RuleCall getStubTypeStubTypeParserRuleCall_0_0() { return cStubTypeStubTypeParserRuleCall_0_0; }
		
		//'stub' ('in' index=PositiveInteger)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'stub'
		public Keyword getStubKeyword_1_0() { return cStubKeyword_1_0; }
		
		//('in' index=PositiveInteger)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'in'
		public Keyword getInKeyword_1_1_0() { return cInKeyword_1_1_0; }
		
		//index=PositiveInteger
		public Assignment getIndexAssignment_1_1_1() { return cIndexAssignment_1_1_1; }
		
		//PositiveInteger
		public RuleCall getIndexPositiveIntegerParserRuleCall_1_1_1_0() { return cIndexPositiveIntegerParserRuleCall_1_1_1_0; }
		
		//(name=QualifiedName longName=LongName)? params=StubParameters | stubRef=[StubDeclaration|QualifiedName]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(name=QualifiedName longName=LongName)? params=StubParameters
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//(name=QualifiedName longName=LongName)?
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2_0_0_0() { return cNameAssignment_2_0_0_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0_0_0_0() { return cNameQualifiedNameParserRuleCall_2_0_0_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_2_0_0_1() { return cLongNameAssignment_2_0_0_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_2_0_0_1_0() { return cLongNameLongNameParserRuleCall_2_0_0_1_0; }
		
		//params=StubParameters
		public Assignment getParamsAssignment_2_0_1() { return cParamsAssignment_2_0_1; }
		
		//StubParameters
		public RuleCall getParamsStubParametersParserRuleCall_2_0_1_0() { return cParamsStubParametersParserRuleCall_2_0_1_0; }
		
		//stubRef=[StubDeclaration|QualifiedName]
		public Assignment getStubRefAssignment_2_1() { return cStubRefAssignment_2_1; }
		
		//[StubDeclaration|QualifiedName]
		public CrossReference getStubRefStubDeclarationCrossReference_2_1_0() { return cStubRefStubDeclarationCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getStubRefStubDeclarationQualifiedNameParserRuleCall_2_1_0_1() { return cStubRefStubDeclarationQualifiedNameParserRuleCall_2_1_0_1; }
		
		//('{' outPaths+=StubOutPath* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//outPaths+=StubOutPath*
		public Assignment getOutPathsAssignment_3_1() { return cOutPathsAssignment_3_1; }
		
		//StubOutPath
		public RuleCall getOutPathsStubOutPathParserRuleCall_3_1_0() { return cOutPathsStubOutPathParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
		
		//connectingStubBody=PathBody?
		public Assignment getConnectingStubBodyAssignment_4() { return cConnectingStubBodyAssignment_4; }
		
		//PathBody
		public RuleCall getConnectingStubBodyPathBodyParserRuleCall_4_0() { return cConnectingStubBodyPathBodyParserRuleCall_4_0; }
	}
	public class StubParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StubParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStubParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPluginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPluginPluginBindingParserRuleCall_2_0 = (RuleCall)cPluginAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StubParameters:
		//	{StubParameters}
		//	'(' plugin+=PluginBinding* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StubParameters} '(' plugin+=PluginBinding* ')'
		public Group getGroup() { return cGroup; }
		
		//{StubParameters}
		public Action getStubParametersAction_0() { return cStubParametersAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//plugin+=PluginBinding*
		public Assignment getPluginAssignment_2() { return cPluginAssignment_2; }
		
		//PluginBinding
		public RuleCall getPluginPluginBindingParserRuleCall_2_0() { return cPluginPluginBindingParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StubDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StubDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLongNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLongNameLongNameParserRuleCall_1_0 = (RuleCall)cLongNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsStubParametersParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		
		//StubDeclaration:
		//	name=QualifiedName longName=LongName '='
		//	params=StubParameters;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName longName=LongName '=' params=StubParameters
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_1() { return cLongNameAssignment_1; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_1_0() { return cLongNameLongNameParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//params=StubParameters
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//StubParameters
		public RuleCall getParamsStubParametersParserRuleCall_3_0() { return cParamsStubParametersParserRuleCall_3_0; }
	}
	public class StubOutPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StubOutPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIndexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIndexPositiveIntegerParserRuleCall_0_1_0 = (RuleCall)cIndexAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cThresholdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThresholdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThresholdPositiveIntegerParserRuleCall_1_2_0 = (RuleCall)cThresholdAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathPathBodyParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		//StubOutPath:
		//	('out' index=PositiveInteger) ('threshold' '[' threshold=PositiveInteger ']')?
		//	path=PathBody;
		@Override public ParserRule getRule() { return rule; }
		
		//('out' index=PositiveInteger) ('threshold' '[' threshold=PositiveInteger ']')? path=PathBody
		public Group getGroup() { return cGroup; }
		
		//'out' index=PositiveInteger
		public Group getGroup_0() { return cGroup_0; }
		
		//'out'
		public Keyword getOutKeyword_0_0() { return cOutKeyword_0_0; }
		
		//index=PositiveInteger
		public Assignment getIndexAssignment_0_1() { return cIndexAssignment_0_1; }
		
		//PositiveInteger
		public RuleCall getIndexPositiveIntegerParserRuleCall_0_1_0() { return cIndexPositiveIntegerParserRuleCall_0_1_0; }
		
		//('threshold' '[' threshold=PositiveInteger ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'threshold'
		public Keyword getThresholdKeyword_1_0() { return cThresholdKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//threshold=PositiveInteger
		public Assignment getThresholdAssignment_1_2() { return cThresholdAssignment_1_2; }
		
		//PositiveInteger
		public RuleCall getThresholdPositiveIntegerParserRuleCall_1_2_0() { return cThresholdPositiveIntegerParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//path=PathBody
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//PathBody
		public RuleCall getPathPathBodyParserRuleCall_2_0() { return cPathPathBodyParserRuleCall_2_0; }
	}
	public class PluginBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PluginBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cReplicationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReplicationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReplicationPositiveIntegerParserRuleCall_1_1_0 = (RuleCall)cReplicationAssignment_1_1.eContents().get(0);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMapUCMmapCrossReference_2_0 = (CrossReference)cMapAssignment_2.eContents().get(0);
		private final RuleCall cMapUCMmapIDTerminalRuleCall_2_0_1 = (RuleCall)cMapUCMmapCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBindingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBindingBindingParserRuleCall_3_1_0 = (RuleCall)cBindingAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cBindingsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_3_2_1_0 = (RuleCall)cBindingsAssignment_3_2_1.eContents().get(0);
		
		//PluginBinding:
		//	condition=Condition? ('replication' replication=PositiveInteger)?
		//	map=[UCMmap] (':' binding=Binding (',' bindings+=Binding)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition? ('replication' replication=PositiveInteger)? map=[UCMmap] (':' binding=Binding (','
		//bindings+=Binding)*)?
		public Group getGroup() { return cGroup; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//('replication' replication=PositiveInteger)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'replication'
		public Keyword getReplicationKeyword_1_0() { return cReplicationKeyword_1_0; }
		
		//replication=PositiveInteger
		public Assignment getReplicationAssignment_1_1() { return cReplicationAssignment_1_1; }
		
		//PositiveInteger
		public RuleCall getReplicationPositiveIntegerParserRuleCall_1_1_0() { return cReplicationPositiveIntegerParserRuleCall_1_1_0; }
		
		//map=[UCMmap]
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }
		
		//[UCMmap]
		public CrossReference getMapUCMmapCrossReference_2_0() { return cMapUCMmapCrossReference_2_0; }
		
		//ID
		public RuleCall getMapUCMmapIDTerminalRuleCall_2_0_1() { return cMapUCMmapIDTerminalRuleCall_2_0_1; }
		
		//(':' binding=Binding (',' bindings+=Binding)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//binding=Binding
		public Assignment getBindingAssignment_3_1() { return cBindingAssignment_3_1; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_3_1_0() { return cBindingBindingParserRuleCall_3_1_0; }
		
		//(',' bindings+=Binding)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//bindings+=Binding
		public Assignment getBindingsAssignment_3_2_1() { return cBindingsAssignment_3_2_1; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_3_2_1_0() { return cBindingsBindingParserRuleCall_3_2_1_0; }
	}
	public class ComponentRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ComponentRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtectedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtectedProtectedKeyword_0_0 = (Keyword)cProtectedAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindCOMPONENTKINDEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLongNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLongNameLongNameParserRuleCall_3_0 = (RuleCall)cLongNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementBoundOptionParserRuleCall_4_1_0 = (RuleCall)cElementAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cElementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cElementsBoundOptionParserRuleCall_4_2_1_0 = (RuleCall)cElementsAssignment_4_2_1.eContents().get(0);
		
		//ComponentRef:
		//	protected?='protected'? kind=COMPONENTKIND?
		//	name=QualifiedName longName=LongName (':' element=BoundOption (',' elements+=BoundOption)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//protected?='protected'? kind=COMPONENTKIND? name=QualifiedName longName=LongName (':' element=BoundOption (','
		//elements+=BoundOption)*)?
		public Group getGroup() { return cGroup; }
		
		//protected?='protected'?
		public Assignment getProtectedAssignment_0() { return cProtectedAssignment_0; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_0_0() { return cProtectedProtectedKeyword_0_0; }
		
		//kind=COMPONENTKIND?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//COMPONENTKIND
		public RuleCall getKindCOMPONENTKINDEnumRuleCall_1_0() { return cKindCOMPONENTKINDEnumRuleCall_1_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//longName=LongName
		public Assignment getLongNameAssignment_3() { return cLongNameAssignment_3; }
		
		//LongName
		public RuleCall getLongNameLongNameParserRuleCall_3_0() { return cLongNameLongNameParserRuleCall_3_0; }
		
		//(':' element=BoundOption (',' elements+=BoundOption)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//element=BoundOption
		public Assignment getElementAssignment_4_1() { return cElementAssignment_4_1; }
		
		//BoundOption
		public RuleCall getElementBoundOptionParserRuleCall_4_1_0() { return cElementBoundOptionParserRuleCall_4_1_0; }
		
		//(',' elements+=BoundOption)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//elements+=BoundOption
		public Assignment getElementsAssignment_4_2_1() { return cElementsAssignment_4_2_1; }
		
		//BoundOption
		public RuleCall getElementsBoundOptionParserRuleCall_4_2_1_0() { return cElementsBoundOptionParserRuleCall_4_2_1_0; }
	}
	public class BoundOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.BoundOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoundElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongBoundElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BoundOption:
		//	BoundElement | LongBoundElement;
		@Override public ParserRule getRule() { return rule; }
		
		//BoundElement | LongBoundElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoundElement
		public RuleCall getBoundElementParserRuleCall_0() { return cBoundElementParserRuleCall_0; }
		
		//LongBoundElement
		public RuleCall getLongBoundElementParserRuleCall_1() { return cLongBoundElementParserRuleCall_1; }
	}
	public class BoundElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.BoundElement");
		private final Assignment cElemAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cElemReferencedBoundElementCrossReference_0 = (CrossReference)cElemAssignment.eContents().get(0);
		private final RuleCall cElemReferencedBoundElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cElemReferencedBoundElementCrossReference_0.eContents().get(1);
		
		//BoundElement:
		//	elem=[ReferencedBoundElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//elem=[ReferencedBoundElement|QualifiedName]
		public Assignment getElemAssignment() { return cElemAssignment; }
		
		//[ReferencedBoundElement|QualifiedName]
		public CrossReference getElemReferencedBoundElementCrossReference_0() { return cElemReferencedBoundElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getElemReferencedBoundElementQualifiedNameParserRuleCall_0_1() { return cElemReferencedBoundElementQualifiedNameParserRuleCall_0_1; }
	}
	public class ReferencedBoundElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ReferencedBoundElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartPointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPathBodyNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEndPointParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRegularEndParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ReferencedBoundElement:
		//	ComponentRef | StartPoint | PathBodyNode | EndPoint | RegularEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentRef | StartPoint | PathBodyNode | EndPoint | RegularEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentRef
		public RuleCall getComponentRefParserRuleCall_0() { return cComponentRefParserRuleCall_0; }
		
		//StartPoint
		public RuleCall getStartPointParserRuleCall_1() { return cStartPointParserRuleCall_1; }
		
		//PathBodyNode
		public RuleCall getPathBodyNodeParserRuleCall_2() { return cPathBodyNodeParserRuleCall_2; }
		
		//EndPoint
		public RuleCall getEndPointParserRuleCall_3() { return cEndPointParserRuleCall_3; }
		
		//RegularEnd
		public RuleCall getRegularEndParserRuleCall_4() { return cRegularEndParserRuleCall_4; }
	}
	public class LongBoundElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.LongBoundElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromQualifiedNameParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToQualifiedNameParserRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//LongBoundElement:
		//	from=QualifiedName '..' to=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//from=QualifiedName '..' to=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//from=QualifiedName
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//QualifiedName
		public RuleCall getFromQualifiedNameParserRuleCall_0_0() { return cFromQualifiedNameParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//to=QualifiedName
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//QualifiedName
		public RuleCall getToQualifiedNameParserRuleCall_2_0() { return cToQualifiedNameParserRuleCall_2_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutBindingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentBindingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Binding:
		//	InBinding | OutBinding | ComponentBinding;
		@Override public ParserRule getRule() { return rule; }
		
		//InBinding | OutBinding | ComponentBinding
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InBinding
		public RuleCall getInBindingParserRuleCall_0() { return cInBindingParserRuleCall_0; }
		
		//OutBinding
		public RuleCall getOutBindingParserRuleCall_1() { return cOutBindingParserRuleCall_1; }
		
		//ComponentBinding
		public RuleCall getComponentBindingParserRuleCall_2() { return cComponentBindingParserRuleCall_2; }
	}
	public class InBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.InBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMapStartStartPointCrossReference_0_0 = (CrossReference)cMapStartAssignment_0.eContents().get(0);
		private final RuleCall cMapStartStartPointQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMapStartStartPointCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexPositiveIntegerParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		
		//InBinding:
		//	mapStart=[StartPoint|QualifiedName] '=' ('in' index=PositiveInteger);
		@Override public ParserRule getRule() { return rule; }
		
		//mapStart=[StartPoint|QualifiedName] '=' ('in' index=PositiveInteger)
		public Group getGroup() { return cGroup; }
		
		//mapStart=[StartPoint|QualifiedName]
		public Assignment getMapStartAssignment_0() { return cMapStartAssignment_0; }
		
		//[StartPoint|QualifiedName]
		public CrossReference getMapStartStartPointCrossReference_0_0() { return cMapStartStartPointCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getMapStartStartPointQualifiedNameParserRuleCall_0_0_1() { return cMapStartStartPointQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'in' index=PositiveInteger
		public Group getGroup_2() { return cGroup_2; }
		
		//'in'
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }
		
		//index=PositiveInteger
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//PositiveInteger
		public RuleCall getIndexPositiveIntegerParserRuleCall_2_1_0() { return cIndexPositiveIntegerParserRuleCall_2_1_0; }
	}
	public class OutBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.OutBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapEndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMapEndEndPointCrossReference_0_0 = (CrossReference)cMapEndAssignment_0.eContents().get(0);
		private final RuleCall cMapEndEndPointQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMapEndEndPointCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOutKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexPositiveIntegerParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		
		//OutBinding:
		//	mapEnd=[EndPoint|QualifiedName] '=' ('out' index=PositiveInteger);
		@Override public ParserRule getRule() { return rule; }
		
		//mapEnd=[EndPoint|QualifiedName] '=' ('out' index=PositiveInteger)
		public Group getGroup() { return cGroup; }
		
		//mapEnd=[EndPoint|QualifiedName]
		public Assignment getMapEndAssignment_0() { return cMapEndAssignment_0; }
		
		//[EndPoint|QualifiedName]
		public CrossReference getMapEndEndPointCrossReference_0_0() { return cMapEndEndPointCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getMapEndEndPointQualifiedNameParserRuleCall_0_0_1() { return cMapEndEndPointQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'out' index=PositiveInteger
		public Group getGroup_2() { return cGroup_2; }
		
		//'out'
		public Keyword getOutKeyword_2_0() { return cOutKeyword_2_0; }
		
		//index=PositiveInteger
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//PositiveInteger
		public RuleCall getIndexPositiveIntegerParserRuleCall_2_1_0() { return cIndexPositiveIntegerParserRuleCall_2_1_0; }
	}
	public class ComponentBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ComponentBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentInAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cComponentInComponentRefCrossReference_0_0 = (CrossReference)cComponentInAssignment_0.eContents().get(0);
		private final RuleCall cComponentInComponentRefQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cComponentInComponentRefCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentOutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentOutComponentRefCrossReference_2_0 = (CrossReference)cComponentOutAssignment_2.eContents().get(0);
		private final RuleCall cComponentOutComponentRefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cComponentOutComponentRefCrossReference_2_0.eContents().get(1);
		
		//ComponentBinding:
		//	componentIn=[ComponentRef|QualifiedName] '=' componentOut=[ComponentRef|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//componentIn=[ComponentRef|QualifiedName] '=' componentOut=[ComponentRef|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//componentIn=[ComponentRef|QualifiedName]
		public Assignment getComponentInAssignment_0() { return cComponentInAssignment_0; }
		
		//[ComponentRef|QualifiedName]
		public CrossReference getComponentInComponentRefCrossReference_0_0() { return cComponentInComponentRefCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getComponentInComponentRefQualifiedNameParserRuleCall_0_0_1() { return cComponentInComponentRefQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//componentOut=[ComponentRef|QualifiedName]
		public Assignment getComponentOutAssignment_2() { return cComponentOutAssignment_2; }
		
		//[ComponentRef|QualifiedName]
		public CrossReference getComponentOutComponentRefCrossReference_2_0() { return cComponentOutComponentRefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getComponentOutComponentRefQualifiedNameParserRuleCall_2_0_1() { return cComponentOutComponentRefQualifiedNameParserRuleCall_2_0_1; }
	}
	public class FailureLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.FailureLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFailureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFailureSTRINGTerminalRuleCall_1_0 = (RuleCall)cFailureAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FailureLabel:
		//	'[[' failure=STRING ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' failure=STRING ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//failure=STRING
		public Assignment getFailureAssignment_1() { return cFailureAssignment_1; }
		
		//STRING
		public RuleCall getFailureSTRINGTerminalRuleCall_1_0() { return cFailureSTRINGTerminalRuleCall_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_2() { return cRightSquareBracketRightSquareBracketKeyword_2; }
	}
	public class StubTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.StubType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBlockingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSynchronizingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StubType:
		//	'blocking' | 'synchronizing';
		@Override public ParserRule getRule() { return rule; }
		
		//'blocking' | 'synchronizing'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'blocking'
		public Keyword getBlockingKeyword_0() { return cBlockingKeyword_0; }
		
		//'synchronizing'
		public Keyword getSynchronizingKeyword_1() { return cSynchronizingKeyword_1; }
	}
	public class PositiveIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.PositiveInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PositiveInteger ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.Text");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentTextContentParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//Text:
		//	content+=TextContent+;
		@Override public ParserRule getRule() { return rule; }
		
		//content+=TextContent+
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//TextContent
		public RuleCall getContentTextContentParserRuleCall_0() { return cContentTextContentParserRuleCall_0; }
	}
	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.TextContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAsteriskKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TextContent:
		//	ID | '@' | '#' | '!' | '%' | '&' | '*' | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | '@' | '#' | '!' | '%' | '&' | '*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_3() { return cExclamationMarkKeyword_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'*'
		public Keyword getAsteriskKeyword_6() { return cAsteriskKeyword_6; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7() { return cINTTerminalRuleCall_7; }
	}
	
	public class QualitativeLabelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.QualitativeLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDeniedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDeniedDeniedKeyword_0_0 = (Keyword)cDeniedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWeaklyDeniedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWeaklyDeniedWeaklyDeniedKeyword_1_0 = (Keyword)cWeaklyDeniedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWeaklySatisfiedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWeaklySatisfiedWeaklySatisfiedKeyword_2_0 = (Keyword)cWeaklySatisfiedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSatisfiedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSatisfiedSatisfiedKeyword_3_0 = (Keyword)cSatisfiedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cConflictEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cConflictConflictKeyword_4_0 = (Keyword)cConflictEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUnknownUnknownKeyword_5_0 = (Keyword)cUnknownEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNoneNoneKeyword_6_0 = (Keyword)cNoneEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum QualitativeLabel:
		//	denied | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | none;
		public EnumRule getRule() { return rule; }
		
		//denied | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | none
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//denied
		public EnumLiteralDeclaration getDeniedEnumLiteralDeclaration_0() { return cDeniedEnumLiteralDeclaration_0; }
		
		//"denied"
		public Keyword getDeniedDeniedKeyword_0_0() { return cDeniedDeniedKeyword_0_0; }
		
		//weaklyDenied
		public EnumLiteralDeclaration getWeaklyDeniedEnumLiteralDeclaration_1() { return cWeaklyDeniedEnumLiteralDeclaration_1; }
		
		//"weaklyDenied"
		public Keyword getWeaklyDeniedWeaklyDeniedKeyword_1_0() { return cWeaklyDeniedWeaklyDeniedKeyword_1_0; }
		
		//weaklySatisfied
		public EnumLiteralDeclaration getWeaklySatisfiedEnumLiteralDeclaration_2() { return cWeaklySatisfiedEnumLiteralDeclaration_2; }
		
		//"weaklySatisfied"
		public Keyword getWeaklySatisfiedWeaklySatisfiedKeyword_2_0() { return cWeaklySatisfiedWeaklySatisfiedKeyword_2_0; }
		
		//satisfied
		public EnumLiteralDeclaration getSatisfiedEnumLiteralDeclaration_3() { return cSatisfiedEnumLiteralDeclaration_3; }
		
		//"satisfied"
		public Keyword getSatisfiedSatisfiedKeyword_3_0() { return cSatisfiedSatisfiedKeyword_3_0; }
		
		//conflict
		public EnumLiteralDeclaration getConflictEnumLiteralDeclaration_4() { return cConflictEnumLiteralDeclaration_4; }
		
		//"conflict"
		public Keyword getConflictConflictKeyword_4_0() { return cConflictConflictKeyword_4_0; }
		
		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_5() { return cUnknownEnumLiteralDeclaration_5; }
		
		//"unknown"
		public Keyword getUnknownUnknownKeyword_5_0() { return cUnknownUnknownKeyword_5_0; }
		
		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_6() { return cNoneEnumLiteralDeclaration_6; }
		
		//"none"
		public Keyword getNoneNoneKeyword_6_0() { return cNoneNoneKeyword_6_0; }
	}
	public class IntentionalElementTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.IntentionalElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSoftgoalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSoftgoalSoftgoalKeyword_0_0 = (Keyword)cSoftgoalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGoalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGoalGoalKeyword_1_0 = (Keyword)cGoalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTaskEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTaskTaskKeyword_2_0 = (Keyword)cTaskEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cResourceEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cResourceResourceKeyword_3_0 = (Keyword)cResourceEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBeliefEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBeliefBeliefKeyword_4_0 = (Keyword)cBeliefEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIndicatorEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIndicatorIndicatorKeyword_5_0 = (Keyword)cIndicatorEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum IntentionalElementType:
		//	softgoal | goal | task | resource | belief | indicator;
		public EnumRule getRule() { return rule; }
		
		//softgoal | goal | task | resource | belief | indicator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//softgoal
		public EnumLiteralDeclaration getSoftgoalEnumLiteralDeclaration_0() { return cSoftgoalEnumLiteralDeclaration_0; }
		
		//"softgoal"
		public Keyword getSoftgoalSoftgoalKeyword_0_0() { return cSoftgoalSoftgoalKeyword_0_0; }
		
		//goal
		public EnumLiteralDeclaration getGoalEnumLiteralDeclaration_1() { return cGoalEnumLiteralDeclaration_1; }
		
		//"goal"
		public Keyword getGoalGoalKeyword_1_0() { return cGoalGoalKeyword_1_0; }
		
		//task
		public EnumLiteralDeclaration getTaskEnumLiteralDeclaration_2() { return cTaskEnumLiteralDeclaration_2; }
		
		//"task"
		public Keyword getTaskTaskKeyword_2_0() { return cTaskTaskKeyword_2_0; }
		
		//resource
		public EnumLiteralDeclaration getResourceEnumLiteralDeclaration_3() { return cResourceEnumLiteralDeclaration_3; }
		
		//"resource"
		public Keyword getResourceResourceKeyword_3_0() { return cResourceResourceKeyword_3_0; }
		
		//belief
		public EnumLiteralDeclaration getBeliefEnumLiteralDeclaration_4() { return cBeliefEnumLiteralDeclaration_4; }
		
		//"belief"
		public Keyword getBeliefBeliefKeyword_4_0() { return cBeliefBeliefKeyword_4_0; }
		
		//indicator
		public EnumLiteralDeclaration getIndicatorEnumLiteralDeclaration_5() { return cIndicatorEnumLiteralDeclaration_5; }
		
		//"indicator"
		public Keyword getIndicatorIndicatorKeyword_5_0() { return cIndicatorIndicatorKeyword_5_0; }
	}
	public class ContributionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ContributionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMakeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMakeMakeKeyword_0_0 = (Keyword)cMakeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHelpEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHelpHelpKeyword_1_0 = (Keyword)cHelpEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSomePositiveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSomePositiveSomePositiveKeyword_2_0 = (Keyword)cSomePositiveEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUnknownUnknownKeyword_3_0 = (Keyword)cUnknownEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSomeNegativeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSomeNegativeSomeNegativeKeyword_4_0 = (Keyword)cSomeNegativeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHurtEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHurtHurtKeyword_5_0 = (Keyword)cHurtEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBreakEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBreakBreakKeyword_6_0 = (Keyword)cBreakEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum ContributionType:
		//	make | help | somePositive | unknown | someNegative | hurt | break;
		public EnumRule getRule() { return rule; }
		
		//make | help | somePositive | unknown | someNegative | hurt | break
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//make
		public EnumLiteralDeclaration getMakeEnumLiteralDeclaration_0() { return cMakeEnumLiteralDeclaration_0; }
		
		//"make"
		public Keyword getMakeMakeKeyword_0_0() { return cMakeMakeKeyword_0_0; }
		
		//help
		public EnumLiteralDeclaration getHelpEnumLiteralDeclaration_1() { return cHelpEnumLiteralDeclaration_1; }
		
		//"help"
		public Keyword getHelpHelpKeyword_1_0() { return cHelpHelpKeyword_1_0; }
		
		//somePositive
		public EnumLiteralDeclaration getSomePositiveEnumLiteralDeclaration_2() { return cSomePositiveEnumLiteralDeclaration_2; }
		
		//"somePositive"
		public Keyword getSomePositiveSomePositiveKeyword_2_0() { return cSomePositiveSomePositiveKeyword_2_0; }
		
		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_3() { return cUnknownEnumLiteralDeclaration_3; }
		
		//"unknown"
		public Keyword getUnknownUnknownKeyword_3_0() { return cUnknownUnknownKeyword_3_0; }
		
		//someNegative
		public EnumLiteralDeclaration getSomeNegativeEnumLiteralDeclaration_4() { return cSomeNegativeEnumLiteralDeclaration_4; }
		
		//"someNegative"
		public Keyword getSomeNegativeSomeNegativeKeyword_4_0() { return cSomeNegativeSomeNegativeKeyword_4_0; }
		
		//hurt
		public EnumLiteralDeclaration getHurtEnumLiteralDeclaration_5() { return cHurtEnumLiteralDeclaration_5; }
		
		//"hurt"
		public Keyword getHurtHurtKeyword_5_0() { return cHurtHurtKeyword_5_0; }
		
		//break
		public EnumLiteralDeclaration getBreakEnumLiteralDeclaration_6() { return cBreakEnumLiteralDeclaration_6; }
		
		//"break"
		public Keyword getBreakBreakKeyword_6_0() { return cBreakBreakKeyword_6_0; }
	}
	public class ImportanceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.ImportanceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHighHighKeyword_0_0 = (Keyword)cHighEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMediumMediumKeyword_1_0 = (Keyword)cMediumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLowLowKeyword_2_0 = (Keyword)cLowEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNoneNoneKeyword_3_0 = (Keyword)cNoneEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ImportanceType:
		//	high | medium | low | none;
		public EnumRule getRule() { return rule; }
		
		//high | medium | low | none
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//high
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_0() { return cHighEnumLiteralDeclaration_0; }
		
		//"high"
		public Keyword getHighHighKeyword_0_0() { return cHighHighKeyword_0_0; }
		
		//medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_1() { return cMediumEnumLiteralDeclaration_1; }
		
		//"medium"
		public Keyword getMediumMediumKeyword_1_0() { return cMediumMediumKeyword_1_0; }
		
		//low
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_2() { return cLowEnumLiteralDeclaration_2; }
		
		//"low"
		public Keyword getLowLowKeyword_2_0() { return cLowLowKeyword_2_0; }
		
		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_3() { return cNoneEnumLiteralDeclaration_3; }
		
		//"none"
		public Keyword getNoneNoneKeyword_3_0() { return cNoneNoneKeyword_3_0; }
	}
	public class DecompositionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.DecompositionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXorXorKeyword_2_0 = (Keyword)cXorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DecompositionType:
		//	and | or | xor;
		public EnumRule getRule() { return rule; }
		
		//and | or | xor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
		
		//xor
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_2() { return cXorEnumLiteralDeclaration_2; }
		
		//"xor"
		public Keyword getXorXorKeyword_2_0() { return cXorXorKeyword_2_0; }
	}
	public class WAITKINDElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.WAITKIND");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPersistentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPersistentPersistentKeyword_0_0 = (Keyword)cPersistentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTransientEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTransientTransientKeyword_1_0 = (Keyword)cTransientEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WAITKIND:
		//	persistent | transient;
		public EnumRule getRule() { return rule; }
		
		//persistent | transient
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//persistent
		public EnumLiteralDeclaration getPersistentEnumLiteralDeclaration_0() { return cPersistentEnumLiteralDeclaration_0; }
		
		//"persistent"
		public Keyword getPersistentPersistentKeyword_0_0() { return cPersistentPersistentKeyword_0_0; }
		
		//transient
		public EnumLiteralDeclaration getTransientEnumLiteralDeclaration_1() { return cTransientEnumLiteralDeclaration_1; }
		
		//"transient"
		public Keyword getTransientTransientKeyword_1_0() { return cTransientTransientKeyword_1_0; }
	}
	public class COMPONENTKINDElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.project.turn.Turn.COMPONENTKIND");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTeamEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTeamTeamKeyword_0_0 = (Keyword)cTeamEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cObjectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cObjectObjectKeyword_1_0 = (Keyword)cObjectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProcessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProcessProcessKeyword_2_0 = (Keyword)cProcessEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAgentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAgentAgentKeyword_3_0 = (Keyword)cAgentEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cActorEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cActorActorKeyword_4_0 = (Keyword)cActorEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cParentEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cParentParentKeyword_5_0 = (Keyword)cParentEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum COMPONENTKIND:
		//	team | object | process | agent | actor | parent;
		public EnumRule getRule() { return rule; }
		
		//team | object | process | agent | actor | parent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//team
		public EnumLiteralDeclaration getTeamEnumLiteralDeclaration_0() { return cTeamEnumLiteralDeclaration_0; }
		
		//"team"
		public Keyword getTeamTeamKeyword_0_0() { return cTeamTeamKeyword_0_0; }
		
		//object
		public EnumLiteralDeclaration getObjectEnumLiteralDeclaration_1() { return cObjectEnumLiteralDeclaration_1; }
		
		//"object"
		public Keyword getObjectObjectKeyword_1_0() { return cObjectObjectKeyword_1_0; }
		
		//process
		public EnumLiteralDeclaration getProcessEnumLiteralDeclaration_2() { return cProcessEnumLiteralDeclaration_2; }
		
		//"process"
		public Keyword getProcessProcessKeyword_2_0() { return cProcessProcessKeyword_2_0; }
		
		//agent
		public EnumLiteralDeclaration getAgentEnumLiteralDeclaration_3() { return cAgentEnumLiteralDeclaration_3; }
		
		//"agent"
		public Keyword getAgentAgentKeyword_3_0() { return cAgentAgentKeyword_3_0; }
		
		//actor
		public EnumLiteralDeclaration getActorEnumLiteralDeclaration_4() { return cActorEnumLiteralDeclaration_4; }
		
		//"actor"
		public Keyword getActorActorKeyword_4_0() { return cActorActorKeyword_4_0; }
		
		//parent
		public EnumLiteralDeclaration getParentEnumLiteralDeclaration_5() { return cParentEnumLiteralDeclaration_5; }
		
		//"parent"
		public Keyword getParentParentKeyword_5_0() { return cParentParentKeyword_5_0; }
	}
	
	private final URNspecElements pURNspec;
	private final ConcreteURNspecElements pConcreteURNspec;
	private final ConcernElements pConcern;
	private final LongNameElements pLongName;
	private final ConditionElements pCondition;
	private final ConcreteConditionElements pConcreteCondition;
	private final URNlinkElements pURNlink;
	private final MetadataElements pMetadata;
	private final URNmodelElementElements pURNmodelElement;
	private final ActorElements pActor;
	private final IntentionalElementElements pIntentionalElement;
	private final ElementLinkElements pElementLink;
	private final ContributionElements pContribution;
	private final DecompositionElements pDecomposition;
	private final DependencyElements pDependency;
	private final ArtificialRuleElements pArtificialRule;
	private final StrategiesGroupElements pStrategiesGroup;
	private final EvaluationStrategyElements pEvaluationStrategy;
	private final ConcreteStrategyElements pConcreteStrategy;
	private final EvaluationElements pEvaluation;
	private final IndicatorEvaluationElements pIndicatorEvaluation;
	private final IndicatorConversionElements pIndicatorConversion;
	private final LinearConversionElements pLinearConversion;
	private final QualToQMappingsElements pQualToQMappings;
	private final QualToQMappingElements pQualToQMapping;
	private final ContributionContextGroupElements pContributionContextGroup;
	private final ContributionContextElements pContributionContext;
	private final ContributionChangeElements pContributionChange;
	private final QualitativeLabelElements eQualitativeLabel;
	private final IntentionalElementTypeElements eIntentionalElementType;
	private final ContributionTypeElements eContributionType;
	private final ImportanceTypeElements eImportanceType;
	private final DecompositionTypeElements eDecompositionType;
	private final QuantitativeValueElements pQuantitativeValue;
	private final UCMmapElements pUCMmap;
	private final PathElements pPath;
	private final StartPointElements pStartPoint;
	private final FailureKindElements pFailureKind;
	private final PathBodyElements pPathBody;
	private final PathWithRegularEndElements pPathWithRegularEnd;
	private final PathWithReferencedEndElements pPathWithReferencedEnd;
	private final PathWithReferencedStubElements pPathWithReferencedStub;
	private final PathBodyNodesElements pPathBodyNodes;
	private final ArrowElements pArrow;
	private final PathBodyNodeElements pPathBodyNode;
	private final RegularEndElements pRegularEnd;
	private final EndpointWithConnectElements pEndpointWithConnect;
	private final ReferencedEndElements pReferencedEnd;
	private final RespRefElements pRespRef;
	private final OrJoinElements pOrJoin;
	private final AndJoinElements pAndJoin;
	private final WaitingPlaceElements pWaitingPlace;
	private final TimerElements pTimer;
	private final ConnectElements pConnect;
	private final ConnectElementElements pConnectElement;
	private final FailurePointElements pFailurePoint;
	private final EndPointElements pEndPoint;
	private final OrForkElements pOrFork;
	private final OrBodyElements pOrBody;
	private final ElseOrForkBodyElements pElseOrForkBody;
	private final OrForkBodyElements pOrForkBody;
	private final RegularOrForkElements pRegularOrFork;
	private final AndForkElements pAndFork;
	private final StubElements pStub;
	private final StubParametersElements pStubParameters;
	private final StubDeclarationElements pStubDeclaration;
	private final StubOutPathElements pStubOutPath;
	private final PluginBindingElements pPluginBinding;
	private final ComponentRefElements pComponentRef;
	private final BoundOptionElements pBoundOption;
	private final BoundElementElements pBoundElement;
	private final ReferencedBoundElementElements pReferencedBoundElement;
	private final LongBoundElementElements pLongBoundElement;
	private final BindingElements pBinding;
	private final InBindingElements pInBinding;
	private final OutBindingElements pOutBinding;
	private final ComponentBindingElements pComponentBinding;
	private final FailureLabelElements pFailureLabel;
	private final WAITKINDElements eWAITKIND;
	private final StubTypeElements pStubType;
	private final COMPONENTKINDElements eCOMPONENTKIND;
	private final PositiveIntegerElements pPositiveInteger;
	private final TextElements pText;
	private final TextContentElements pTextContent;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public TurnGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pURNspec = new URNspecElements();
		this.pConcreteURNspec = new ConcreteURNspecElements();
		this.pConcern = new ConcernElements();
		this.pLongName = new LongNameElements();
		this.pCondition = new ConditionElements();
		this.pConcreteCondition = new ConcreteConditionElements();
		this.pURNlink = new URNlinkElements();
		this.pMetadata = new MetadataElements();
		this.pURNmodelElement = new URNmodelElementElements();
		this.pActor = new ActorElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pElementLink = new ElementLinkElements();
		this.pContribution = new ContributionElements();
		this.pDecomposition = new DecompositionElements();
		this.pDependency = new DependencyElements();
		this.pArtificialRule = new ArtificialRuleElements();
		this.pStrategiesGroup = new StrategiesGroupElements();
		this.pEvaluationStrategy = new EvaluationStrategyElements();
		this.pConcreteStrategy = new ConcreteStrategyElements();
		this.pEvaluation = new EvaluationElements();
		this.pIndicatorEvaluation = new IndicatorEvaluationElements();
		this.pIndicatorConversion = new IndicatorConversionElements();
		this.pLinearConversion = new LinearConversionElements();
		this.pQualToQMappings = new QualToQMappingsElements();
		this.pQualToQMapping = new QualToQMappingElements();
		this.pContributionContextGroup = new ContributionContextGroupElements();
		this.pContributionContext = new ContributionContextElements();
		this.pContributionChange = new ContributionChangeElements();
		this.eQualitativeLabel = new QualitativeLabelElements();
		this.eIntentionalElementType = new IntentionalElementTypeElements();
		this.eContributionType = new ContributionTypeElements();
		this.eImportanceType = new ImportanceTypeElements();
		this.eDecompositionType = new DecompositionTypeElements();
		this.pQuantitativeValue = new QuantitativeValueElements();
		this.pUCMmap = new UCMmapElements();
		this.pPath = new PathElements();
		this.pStartPoint = new StartPointElements();
		this.pFailureKind = new FailureKindElements();
		this.pPathBody = new PathBodyElements();
		this.pPathWithRegularEnd = new PathWithRegularEndElements();
		this.pPathWithReferencedEnd = new PathWithReferencedEndElements();
		this.pPathWithReferencedStub = new PathWithReferencedStubElements();
		this.pPathBodyNodes = new PathBodyNodesElements();
		this.pArrow = new ArrowElements();
		this.pPathBodyNode = new PathBodyNodeElements();
		this.pRegularEnd = new RegularEndElements();
		this.pEndpointWithConnect = new EndpointWithConnectElements();
		this.pReferencedEnd = new ReferencedEndElements();
		this.pRespRef = new RespRefElements();
		this.pOrJoin = new OrJoinElements();
		this.pAndJoin = new AndJoinElements();
		this.pWaitingPlace = new WaitingPlaceElements();
		this.pTimer = new TimerElements();
		this.pConnect = new ConnectElements();
		this.pConnectElement = new ConnectElementElements();
		this.pFailurePoint = new FailurePointElements();
		this.pEndPoint = new EndPointElements();
		this.pOrFork = new OrForkElements();
		this.pOrBody = new OrBodyElements();
		this.pElseOrForkBody = new ElseOrForkBodyElements();
		this.pOrForkBody = new OrForkBodyElements();
		this.pRegularOrFork = new RegularOrForkElements();
		this.pAndFork = new AndForkElements();
		this.pStub = new StubElements();
		this.pStubParameters = new StubParametersElements();
		this.pStubDeclaration = new StubDeclarationElements();
		this.pStubOutPath = new StubOutPathElements();
		this.pPluginBinding = new PluginBindingElements();
		this.pComponentRef = new ComponentRefElements();
		this.pBoundOption = new BoundOptionElements();
		this.pBoundElement = new BoundElementElements();
		this.pReferencedBoundElement = new ReferencedBoundElementElements();
		this.pLongBoundElement = new LongBoundElementElements();
		this.pBinding = new BindingElements();
		this.pInBinding = new InBindingElements();
		this.pOutBinding = new OutBindingElements();
		this.pComponentBinding = new ComponentBindingElements();
		this.pFailureLabel = new FailureLabelElements();
		this.eWAITKIND = new WAITKINDElements();
		this.pStubType = new StubTypeElements();
		this.eCOMPONENTKIND = new COMPONENTKINDElements();
		this.pPositiveInteger = new PositiveIntegerElements();
		this.pText = new TextElements();
		this.pTextContent = new TextContentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.project.turn.Turn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//URNspec:
	//	'urnModel' name=QualifiedName
	//	info=ConcreteURNspec? & actors+=Actor* & showAsMeansEnd?='showAsMeansEnd'? & stratGroups+=StrategiesGroup* &
	//	strategies+=EvaluationStrategy* & indConversions+=IndicatorConversion* &
	//	contribContextGroups+=ContributionContextGroup* & contribContexts+=ContributionContext* & ucmMaps+=UCMmap* &
	//	concerns+=Concern* & urnlinks+=URNlink* & metadata+=Metadata*;
	public URNspecElements getURNspecAccess() {
		return pURNspec;
	}
	
	public ParserRule getURNspecRule() {
		return getURNspecAccess().getRule();
	}
	
	//ConcreteURNspec:
	//	'{'
	//	'description' description=STRING
	//	'author' author=STRING
	//	'created' created=STRING
	//	'modified' modified=STRING
	//	'version' specVersion=STRING
	//	'urnVersion' urnVersion=STRING
	//	'}';
	public ConcreteURNspecElements getConcreteURNspecAccess() {
		return pConcreteURNspec;
	}
	
	public ParserRule getConcreteURNspecRule() {
		return getConcreteURNspecAccess().getRule();
	}
	
	//Concern:
	//	'concern' name=QualifiedName
	//	longName=LongName ':'
	//	condition=Condition?
	//	element=[URNmodelElement] (',' elements+=[URNmodelElement])*;
	public ConcernElements getConcernAccess() {
		return pConcern;
	}
	
	public ParserRule getConcernRule() {
		return getConcernAccess().getRule();
	}
	
	//LongName:
	//	{LongName} ('#' longname=(ID | STRING))?;
	public LongNameElements getLongNameAccess() {
		return pLongName;
	}
	
	public ParserRule getLongNameRule() {
		return getLongNameAccess().getRule();
	}
	
	//Condition:
	//	'[' expression=Text ']' ('{' info=ConcreteCondition? '}')?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConcreteCondition:
	//	label=STRING
	//	description=STRING;
	public ConcreteConditionElements getConcreteConditionAccess() {
		return pConcreteCondition;
	}
	
	public ParserRule getConcreteConditionRule() {
		return getConcreteConditionAccess().getRule();
	}
	
	//URNlink:
	//	'link' (name=QualifiedName longName=LongName ':')? ('type' type=Text)?
	//	fromElem=[URNmodelElement] '-->'
	//	toElem=[URNmodelElement];
	public URNlinkElements getURNlinkAccess() {
		return pURNlink;
	}
	
	public ParserRule getURNlinkRule() {
		return getURNlinkAccess().getRule();
	}
	
	//Metadata:
	//	'metadata' (elem=[URNmodelElement|QualifiedName] ':')?
	//	name=ID '=' value=Text;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//URNmodelElement:
	//	ArtificialRule | StartPoint | StrategiesGroup | ContributionContextGroup | URNlink | Concern | Actor |
	//	IntentionalElement | Contribution | Decomposition | Dependency | EvaluationStrategy | LinearConversion |
	//	QualToQMappings | ContributionContext | UCMmap | RespRef | WaitingPlace | FailurePoint | Stub | OrFork | OrJoin |
	//	AndFork | AndJoin | Timer | ComponentRef;
	public URNmodelElementElements getURNmodelElementAccess() {
		return pURNmodelElement;
	}
	
	public ParserRule getURNmodelElementRule() {
		return getURNmodelElementAccess().getRule();
	}
	
	//Actor:
	//	'actor' name=QualifiedName
	//	longName=LongName '{' ('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))?
	//	elems+=IntentionalElement*
	//	'}';
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//IntentionalElement:
	//	type=IntentionalElementType name=QualifiedName
	//	longName=LongName '{' ('importance' (importance=ImportanceType | importanceQuantitative=QuantitativeValue))? ('unit'
	//	unit=STRING)?
	//	linksSrc+=ElementLink*
	//	'}';
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}
	
	//ElementLink:
	//	Contribution | Decomposition | Dependency;
	public ElementLinkElements getElementLinkAccess() {
		return pElementLink;
	}
	
	public ParserRule getElementLinkRule() {
		return getElementLinkAccess().getRule();
	}
	
	//Contribution:
	//	(name=QualifiedName longName=LongName)?
	//	'contributesTo' dest=[IntentionalElement|QualifiedName] correlation?='correlated'? 'with'
	//	(contribution=ContributionType | quantitativeContribution=QuantitativeValue);
	public ContributionElements getContributionAccess() {
		return pContribution;
	}
	
	public ParserRule getContributionRule() {
		return getContributionAccess().getRule();
	}
	
	//Decomposition:
	//	(name=QualifiedName longName=LongName)?
	//	decompositionType=DecompositionType 'decomposes' dest=[IntentionalElement|QualifiedName];
	public DecompositionElements getDecompositionAccess() {
		return pDecomposition;
	}
	
	public ParserRule getDecompositionRule() {
		return getDecompositionAccess().getRule();
	}
	
	//Dependency:
	//	(name=QualifiedName longName=LongName)?
	//	'dependsOn' dest=[IntentionalElement|QualifiedName];
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//ArtificialRule:
	//	longName=STRING?;
	public ArtificialRuleElements getArtificialRuleAccess() {
		return pArtificialRule;
	}
	
	public ParserRule getArtificialRuleRule() {
		return getArtificialRuleAccess().getRule();
	}
	
	//StrategiesGroup:
	//	'strategiesGroup' name=QualifiedName
	//	longName=LongName ':'
	//	evalStrategy=[EvaluationStrategy] (',' evalStrategies+=[EvaluationStrategy])*;
	public StrategiesGroupElements getStrategiesGroupAccess() {
		return pStrategiesGroup;
	}
	
	public ParserRule getStrategiesGroupRule() {
		return getStrategiesGroupAccess().getRule();
	}
	
	//EvaluationStrategy:
	//	'strategy' name=QualifiedName
	//	longName=LongName '{'
	//	info=ConcreteStrategy?
	//	evaluations+=Evaluation* ('includes' includedStrategy=[EvaluationStrategy] (','
	//	includedStrategies+=[EvaluationStrategy])*)?
	//	'}';
	public EvaluationStrategyElements getEvaluationStrategyAccess() {
		return pEvaluationStrategy;
	}
	
	public ParserRule getEvaluationStrategyRule() {
		return getEvaluationStrategyAccess().getRule();
	}
	
	//ConcreteStrategy:
	//	'author' author=STRING;
	public ConcreteStrategyElements getConcreteStrategyAccess() {
		return pConcreteStrategy;
	}
	
	public ParserRule getConcreteStrategyRule() {
		return getConcreteStrategyAccess().getRule();
	}
	
	//Evaluation:
	//	intElement=[IntentionalElement|QualifiedName] exceeds?='exceeding'? ('evaluation'
	//	(qualitativeEvaluation=QualitativeLabel | evaluation=QuantitativeValue) | indicatorEval=IndicatorEvaluation
	//	'convertedWith' conversion=[IndicatorConversion]);
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}
	
	//IndicatorEvaluation:
	//	'real' (realWorldLabel=STRING | realWorldValue=INT);
	public IndicatorEvaluationElements getIndicatorEvaluationAccess() {
		return pIndicatorEvaluation;
	}
	
	public ParserRule getIndicatorEvaluationRule() {
		return getIndicatorEvaluationAccess().getRule();
	}
	
	//IndicatorConversion:
	//	LinearConversion | QualToQMappings;
	public IndicatorConversionElements getIndicatorConversionAccess() {
		return pIndicatorConversion;
	}
	
	public ParserRule getIndicatorConversionRule() {
		return getIndicatorConversionAccess().getRule();
	}
	
	//LinearConversion:
	//	'linearConversion' name=QualifiedName
	//	longName=LongName '{'
	//	'unit' unit=STRING
	//	'target' targetValue=INT
	//	'threshold' thresholdValue=INT
	//	'worst' worstValue=INT
	//	'}';
	public LinearConversionElements getLinearConversionAccess() {
		return pLinearConversion;
	}
	
	public ParserRule getLinearConversionRule() {
		return getLinearConversionAccess().getRule();
	}
	
	//QualToQMappings:
	//	'mappingConversion' name=QualifiedName
	//	longName=LongName '{'
	//	'unit' unit=STRING
	//	mappings+=QualToQMapping+
	//	'}';
	public QualToQMappingsElements getQualToQMappingsAccess() {
		return pQualToQMappings;
	}
	
	public ParserRule getQualToQMappingsRule() {
		return getQualToQMappingsAccess().getRule();
	}
	
	//QualToQMapping:
	//	exceeds?='exceeding'? 'real' realWorldLabel=STRING '-->' (qualitativeEvaluation=QualitativeLabel |
	//	evaluation=QuantitativeValue);
	public QualToQMappingElements getQualToQMappingAccess() {
		return pQualToQMapping;
	}
	
	public ParserRule getQualToQMappingRule() {
		return getQualToQMappingAccess().getRule();
	}
	
	//ContributionContextGroup:
	//	'contributionContextGroup' name=QualifiedName
	//	longName=LongName ':'
	//	contrib=[ContributionContext] (',' contribs+=[ContributionContext])*;
	public ContributionContextGroupElements getContributionContextGroupAccess() {
		return pContributionContextGroup;
	}
	
	public ParserRule getContributionContextGroupRule() {
		return getContributionContextGroupAccess().getRule();
	}
	
	//ContributionContext:
	//	'contributionContext' name=QualifiedName
	//	longName=LongName '{'
	//	changes+=ContributionChange* ('includes' includedContext=[ContributionContext] (','
	//	includedContexts+=[ContributionContext])*)?
	//	'}';
	public ContributionContextElements getContributionContextAccess() {
		return pContributionContext;
	}
	
	public ParserRule getContributionContextRule() {
		return getContributionContextAccess().getRule();
	}
	
	//ContributionChange:
	//	contribution=[Contribution|QualifiedName]
	//	'with' (newContribution=ContributionType | newQuantitativeContribution=QuantitativeValue);
	public ContributionChangeElements getContributionChangeAccess() {
		return pContributionChange;
	}
	
	public ParserRule getContributionChangeRule() {
		return getContributionChangeAccess().getRule();
	}
	
	//enum QualitativeLabel:
	//	denied | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | none;
	public QualitativeLabelElements getQualitativeLabelAccess() {
		return eQualitativeLabel;
	}
	
	public EnumRule getQualitativeLabelRule() {
		return getQualitativeLabelAccess().getRule();
	}
	
	//enum IntentionalElementType:
	//	softgoal | goal | task | resource | belief | indicator;
	public IntentionalElementTypeElements getIntentionalElementTypeAccess() {
		return eIntentionalElementType;
	}
	
	public EnumRule getIntentionalElementTypeRule() {
		return getIntentionalElementTypeAccess().getRule();
	}
	
	//enum ContributionType:
	//	make | help | somePositive | unknown | someNegative | hurt | break;
	public ContributionTypeElements getContributionTypeAccess() {
		return eContributionType;
	}
	
	public EnumRule getContributionTypeRule() {
		return getContributionTypeAccess().getRule();
	}
	
	//enum ImportanceType:
	//	high | medium | low | none;
	public ImportanceTypeElements getImportanceTypeAccess() {
		return eImportanceType;
	}
	
	public EnumRule getImportanceTypeRule() {
		return getImportanceTypeAccess().getRule();
	}
	
	//enum DecompositionType:
	//	and | or | xor;
	public DecompositionTypeElements getDecompositionTypeAccess() {
		return eDecompositionType;
	}
	
	public EnumRule getDecompositionTypeRule() {
		return getDecompositionTypeAccess().getRule();
	}
	
	//QuantitativeValue ecore::EInt:
	//	('-' | '+')? INT;
	public QuantitativeValueElements getQuantitativeValueAccess() {
		return pQuantitativeValue;
	}
	
	public ParserRule getQuantitativeValueRule() {
		return getQuantitativeValueAccess().getRule();
	}
	
	//UCMmap:
	//	singleton?='singleton'? 'map' name=QualifiedName
	//	longName=LongName '{'
	//	stubs+=StubDeclaration*
	//	paths+=Path*
	//	components+=ComponentRef*
	//	//comment+=ML_COMMENT*
	//	'}';
	public UCMmapElements getUCMmapAccess() {
		return pUCMmap;
	}
	
	public ParserRule getUCMmapRule() {
		return getUCMmapAccess().getRule();
	}
	
	//Path:
	//	startPoint=StartPoint
	//	pathBody=PathBody;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//StartPoint:
	//	'start' (name=QualifiedName longName=LongName)? precondition=Condition? | failKind=FailureKind name=QualifiedName
	//	longName=LongName ('catches' '[[' catches=STRING ']]')?;
	public StartPointElements getStartPointAccess() {
		return pStartPoint;
	}
	
	public ParserRule getStartPointRule() {
		return getStartPointAccess().getRule();
	}
	
	//FailureKind:
	//	'abort' | 'failure';
	public FailureKindElements getFailureKindAccess() {
		return pFailureKind;
	}
	
	public ParserRule getFailureKindRule() {
		return getFailureKindAccess().getRule();
	}
	
	//PathBody:
	//	PathWithRegularEnd;
	public PathBodyElements getPathBodyAccess() {
		return pPathBody;
	}
	
	public ParserRule getPathBodyRule() {
		return getPathBodyAccess().getRule();
	}
	
	//PathWithRegularEnd PathBody:
	//	PathWithReferencedEnd pathEnd=RegularEnd?;
	public PathWithRegularEndElements getPathWithRegularEndAccess() {
		return pPathWithRegularEnd;
	}
	
	public ParserRule getPathWithRegularEndRule() {
		return getPathWithRegularEndAccess().getRule();
	}
	
	//PathWithReferencedEnd PathBody:
	//	PathWithReferencedStub (referencedEnd=[ReferencedEnd]? ';')?;
	public PathWithReferencedEndElements getPathWithReferencedEndAccess() {
		return pPathWithReferencedEnd;
	}
	
	public ParserRule getPathWithReferencedEndRule() {
		return getPathWithReferencedEndAccess().getRule();
	}
	
	//PathWithReferencedStub PathBody:
	//	PathBodyNodes ('in'
	//	referencedStub=[Stub|QualifiedName] index=PositiveInteger ';')?;
	public PathWithReferencedStubElements getPathWithReferencedStubAccess() {
		return pPathWithReferencedStub;
	}
	
	public ParserRule getPathWithReferencedStubRule() {
		return getPathWithReferencedStubAccess().getRule();
	}
	
	//PathBodyNodes PathBody:
	//	{PathBodyNodes} Arrow (pathNodes+=PathBodyNode '->')*;
	public PathBodyNodesElements getPathBodyNodesAccess() {
		return pPathBodyNodes;
	}
	
	public ParserRule getPathBodyNodesRule() {
		return getPathBodyNodesAccess().getRule();
	}
	
	//Arrow:
	//	'->';
	public ArrowElements getArrowAccess() {
		return pArrow;
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}
	
	//PathBodyNode:
	//	AndJoin | RespRef | OrJoin | WaitingPlace | FailurePoint | Timer | Connect;
	public PathBodyNodeElements getPathBodyNodeAccess() {
		return pPathBodyNode;
	}
	
	public ParserRule getPathBodyNodeRule() {
		return getPathBodyNodeAccess().getRule();
	}
	
	//RegularEnd:
	//	EndpointWithConnect | AndFork | OrFork | Stub;
	public RegularEndElements getRegularEndAccess() {
		return pRegularEnd;
	}
	
	public ParserRule getRegularEndRule() {
		return getRegularEndAccess().getRule();
	}
	
	////synchronous trigger
	//EndpointWithConnect:
	//	regularEnd=EndPoint ('->' connect=Connect)?;
	public EndpointWithConnectElements getEndpointWithConnectAccess() {
		return pEndpointWithConnect;
	}
	
	public ParserRule getEndpointWithConnectRule() {
		return getEndpointWithConnectAccess().getRule();
	}
	
	//ReferencedEnd:
	//	RespRef | OrJoin | AndJoin | FailurePoint;
	public ReferencedEndElements getReferencedEndAccess() {
		return pReferencedEnd;
	}
	
	public ParserRule getReferencedEndRule() {
		return getReferencedEndAccess().getRule();
	}
	
	//RespRef:
	//	'X' name=QualifiedName
	//	longName=LongName;
	public RespRefElements getRespRefAccess() {
		return pRespRef;
	}
	
	public ParserRule getRespRefRule() {
		return getRespRefAccess().getRule();
	}
	
	//OrJoin:
	//	{OrJoin} ('join' name=QualifiedName) longName=LongName;
	public OrJoinElements getOrJoinAccess() {
		return pOrJoin;
	}
	
	public ParserRule getOrJoinRule() {
		return getOrJoinAccess().getRule();
	}
	
	//AndJoin:
	//	('synch' | 'sync' | '|') name=QualifiedName longName=LongName;
	public AndJoinElements getAndJoinAccess() {
		return pAndJoin;
	}
	
	public ParserRule getAndJoinRule() {
		return getAndJoinAccess().getRule();
	}
	
	//WaitingPlace:
	//	{WaitingPlace} kind=WAITKIND? 'wait' (name=QualifiedName longName=LongName)?
	//	condition=Condition?;
	public WaitingPlaceElements getWaitingPlaceAccess() {
		return pWaitingPlace;
	}
	
	public ParserRule getWaitingPlaceRule() {
		return getWaitingPlaceAccess().getRule();
	}
	
	//Timer:
	//	{Timer} kind=WAITKIND? 'timer' (name=QualifiedName longName=LongName)? ('{'
	//	'timeout'? timeoutCondition=Condition? timeoutPath=PathBody?
	//	'}')? condition=Condition?;
	public TimerElements getTimerAccess() {
		return pTimer;
	}
	
	public ParserRule getTimerRule() {
		return getTimerAccess().getRule();
	}
	
	//Connect:
	//	'trigger'
	//	connectsTo=[ConnectElement|QualifiedName] ';';
	public ConnectElements getConnectAccess() {
		return pConnect;
	}
	
	public ParserRule getConnectRule() {
		return getConnectAccess().getRule();
	}
	
	//ConnectElement:
	//	WaitingPlace | Timer | StartPoint;
	public ConnectElementElements getConnectElementAccess() {
		return pConnectElement;
	}
	
	public ParserRule getConnectElementRule() {
		return getConnectElementAccess().getRule();
	}
	
	//FailurePoint:
	//	{FailurePoint} 'fail' (name=QualifiedName longName=LongName)? (condition=Condition failLabel=FailureLabel |
	//	failLabel=FailureLabel condition=Condition)?;
	public FailurePointElements getFailurePointAccess() {
		return pFailurePoint;
	}
	
	public ParserRule getFailurePointRule() {
		return getFailurePointAccess().getRule();
	}
	
	//EndPoint:
	//	'end' (name=QualifiedName longName=LongName)? condition=Condition? '.';
	public EndPointElements getEndPointAccess() {
		return pEndPoint;
	}
	
	public ParserRule getEndPointRule() {
		return getEndPointAccess().getRule();
	}
	
	//OrFork:
	//	'or' ((name=QualifiedName longName=LongName)? '{'
	//	body=OrBody
	//	'}' | condition=Condition) connectingOrBody=PathBody?;
	public OrForkElements getOrForkAccess() {
		return pOrFork;
	}
	
	public ParserRule getOrForkRule() {
		return getOrForkAccess().getRule();
	}
	
	//OrBody:
	//	ElseOrForkBody;
	public OrBodyElements getOrBodyAccess() {
		return pOrBody;
	}
	
	public ParserRule getOrBodyRule() {
		return getOrBodyAccess().getRule();
	}
	
	//ElseOrForkBody OrBody:
	//	OrForkBody ('[else]' elseBody=PathBody)?;
	public ElseOrForkBodyElements getElseOrForkBodyAccess() {
		return pElseOrForkBody;
	}
	
	public ParserRule getElseOrForkBodyRule() {
		return getElseOrForkBodyAccess().getRule();
	}
	
	//OrForkBody OrBody:
	//	regularBody+=RegularOrFork+;
	public OrForkBodyElements getOrForkBodyAccess() {
		return pOrForkBody;
	}
	
	public ParserRule getOrForkBodyRule() {
		return getOrForkBodyAccess().getRule();
	}
	
	//RegularOrFork:
	//	condition=Condition
	//	pathBody=PathBody;
	public RegularOrForkElements getRegularOrForkAccess() {
		return pRegularOrFork;
	}
	
	public ParserRule getRegularOrForkRule() {
		return getRegularOrForkAccess().getRule();
	}
	
	//AndFork:
	//	'and' (name=QualifiedName longName=LongName)? '{' ('*' pathbody+=PathBody)*
	//	'}' connectingAndBody=PathBody?;
	public AndForkElements getAndForkAccess() {
		return pAndFork;
	}
	
	public ParserRule getAndForkRule() {
		return getAndForkAccess().getRule();
	}
	
	//Stub:
	//	stubType=StubType? ('stub' ('in' index=PositiveInteger)?) ((name=QualifiedName longName=LongName)?
	//	params=StubParameters | stubRef=[StubDeclaration|QualifiedName]) ('{'
	//	outPaths+=StubOutPath*
	//	'}')?
	//	connectingStubBody=PathBody?;
	public StubElements getStubAccess() {
		return pStub;
	}
	
	public ParserRule getStubRule() {
		return getStubAccess().getRule();
	}
	
	//StubParameters:
	//	{StubParameters}
	//	'(' plugin+=PluginBinding* ')';
	public StubParametersElements getStubParametersAccess() {
		return pStubParameters;
	}
	
	public ParserRule getStubParametersRule() {
		return getStubParametersAccess().getRule();
	}
	
	//StubDeclaration:
	//	name=QualifiedName longName=LongName '='
	//	params=StubParameters;
	public StubDeclarationElements getStubDeclarationAccess() {
		return pStubDeclaration;
	}
	
	public ParserRule getStubDeclarationRule() {
		return getStubDeclarationAccess().getRule();
	}
	
	//StubOutPath:
	//	('out' index=PositiveInteger) ('threshold' '[' threshold=PositiveInteger ']')?
	//	path=PathBody;
	public StubOutPathElements getStubOutPathAccess() {
		return pStubOutPath;
	}
	
	public ParserRule getStubOutPathRule() {
		return getStubOutPathAccess().getRule();
	}
	
	//PluginBinding:
	//	condition=Condition? ('replication' replication=PositiveInteger)?
	//	map=[UCMmap] (':' binding=Binding (',' bindings+=Binding)*)?;
	public PluginBindingElements getPluginBindingAccess() {
		return pPluginBinding;
	}
	
	public ParserRule getPluginBindingRule() {
		return getPluginBindingAccess().getRule();
	}
	
	//ComponentRef:
	//	protected?='protected'? kind=COMPONENTKIND?
	//	name=QualifiedName longName=LongName (':' element=BoundOption (',' elements+=BoundOption)*)?;
	public ComponentRefElements getComponentRefAccess() {
		return pComponentRef;
	}
	
	public ParserRule getComponentRefRule() {
		return getComponentRefAccess().getRule();
	}
	
	//BoundOption:
	//	BoundElement | LongBoundElement;
	public BoundOptionElements getBoundOptionAccess() {
		return pBoundOption;
	}
	
	public ParserRule getBoundOptionRule() {
		return getBoundOptionAccess().getRule();
	}
	
	//BoundElement:
	//	elem=[ReferencedBoundElement|QualifiedName];
	public BoundElementElements getBoundElementAccess() {
		return pBoundElement;
	}
	
	public ParserRule getBoundElementRule() {
		return getBoundElementAccess().getRule();
	}
	
	//ReferencedBoundElement:
	//	ComponentRef | StartPoint | PathBodyNode | EndPoint | RegularEnd;
	public ReferencedBoundElementElements getReferencedBoundElementAccess() {
		return pReferencedBoundElement;
	}
	
	public ParserRule getReferencedBoundElementRule() {
		return getReferencedBoundElementAccess().getRule();
	}
	
	//LongBoundElement:
	//	from=QualifiedName '..' to=QualifiedName;
	public LongBoundElementElements getLongBoundElementAccess() {
		return pLongBoundElement;
	}
	
	public ParserRule getLongBoundElementRule() {
		return getLongBoundElementAccess().getRule();
	}
	
	//Binding:
	//	InBinding | OutBinding | ComponentBinding;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//InBinding:
	//	mapStart=[StartPoint|QualifiedName] '=' ('in' index=PositiveInteger);
	public InBindingElements getInBindingAccess() {
		return pInBinding;
	}
	
	public ParserRule getInBindingRule() {
		return getInBindingAccess().getRule();
	}
	
	//OutBinding:
	//	mapEnd=[EndPoint|QualifiedName] '=' ('out' index=PositiveInteger);
	public OutBindingElements getOutBindingAccess() {
		return pOutBinding;
	}
	
	public ParserRule getOutBindingRule() {
		return getOutBindingAccess().getRule();
	}
	
	//ComponentBinding:
	//	componentIn=[ComponentRef|QualifiedName] '=' componentOut=[ComponentRef|QualifiedName];
	public ComponentBindingElements getComponentBindingAccess() {
		return pComponentBinding;
	}
	
	public ParserRule getComponentBindingRule() {
		return getComponentBindingAccess().getRule();
	}
	
	//FailureLabel:
	//	'[[' failure=STRING ']]';
	public FailureLabelElements getFailureLabelAccess() {
		return pFailureLabel;
	}
	
	public ParserRule getFailureLabelRule() {
		return getFailureLabelAccess().getRule();
	}
	
	//enum WAITKIND:
	//	persistent | transient;
	public WAITKINDElements getWAITKINDAccess() {
		return eWAITKIND;
	}
	
	public EnumRule getWAITKINDRule() {
		return getWAITKINDAccess().getRule();
	}
	
	//StubType:
	//	'blocking' | 'synchronizing';
	public StubTypeElements getStubTypeAccess() {
		return pStubType;
	}
	
	public ParserRule getStubTypeRule() {
		return getStubTypeAccess().getRule();
	}
	
	//enum COMPONENTKIND:
	//	team | object | process | agent | actor | parent;
	public COMPONENTKINDElements getCOMPONENTKINDAccess() {
		return eCOMPONENTKIND;
	}
	
	public EnumRule getCOMPONENTKINDRule() {
		return getCOMPONENTKINDAccess().getRule();
	}
	
	//PositiveInteger ecore::EInt:
	//	INT;
	public PositiveIntegerElements getPositiveIntegerAccess() {
		return pPositiveInteger;
	}
	
	public ParserRule getPositiveIntegerRule() {
		return getPositiveIntegerAccess().getRule();
	}
	
	//Text:
	//	content+=TextContent+;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//TextContent:
	//	ID | '@' | '#' | '!' | '%' | '&' | '*' | INT;
	public TextContentElements getTextContentAccess() {
		return pTextContent;
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
